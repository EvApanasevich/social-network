{"version":3,"sources":["components/header/Header.module.css","redux/dialogPageReducer.ts","components/navbar/Navbar.module.css","hok/withAuthRedirect.tsx","components/login/Login.module.css","api/api.ts","components/common/buttons/Button.tsx","components/common/form-elements/FormElements.tsx","reportWebVitals.ts","redux/profilePageReducer.ts","redux/sidebarReducer.ts","redux/authReducer.ts","redux/AppReducer.ts","redux/Redux-store.ts","components/settings/Settings.tsx","components/news/News.tsx","components/music/Music.tsx","components/navbar/NavbarContainer.tsx","components/navbar/Navbar.tsx","components/profile/profileInfo/ProfileStatus.tsx","components/profile/profileInfo/ProfileInfoForm.tsx","components/profile/profileInfo/Info.tsx","components/profile/profileInfo/ProfileInfo.tsx","components/profile/my-posts/post/Post.tsx","components/profile/my-posts/MyPosts.tsx","components/profile/ProfileContainer.tsx","components/header/Header.tsx","components/header/HeaderContainer.tsx","components/login/LoginForm.tsx","components/login/Login.tsx","App.tsx","index.tsx","components/profile/profileInfo/ProfileInfo.module.css","utils/validators/validators.ts","redux/usersReducer.ts","assets/images/preloader.gif","components/common/preloader/Preloader.tsx","components/common/form-elements/FormElements.module.css","assets/images/Avaimg.png","components/profile/my-posts/MyPosts.module.css","components/profile/my-posts/post/Post.module.css","components/common/buttons/Buttons.module.css"],"names":["module","exports","ADD_NEW_MESSAGE","initialState","dialogs","id","v1","name","messages","message","dialogReducer","state","action","type","newMessage","sendMessage","mapStateToProps","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","instance","axios","create","baseURL","withCredentials","headers","usersApi","getUsers","currentPage","count","get","follow","userId","post","unfollow","delete","profileApi","getProfile","getStatus","updateStatus","status","put","updatePhoto","photofile","formData","FormData","append","saveProfileInfo","authApi","authMe","login","email","password","rememberMe","captcha","logout","securityApi","getCaptchaUrl","Button","onClickHandler","buttonName","style","useState","st","setStyle","onMouseEnter","event","onMouseLeave","className","s","active","button","onClick","Textarea","input","meta","hasError","touched","error","formElement","Input","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_NEW_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO","TOGGLE_EDIT_FORM","posts","likes","userProfile","editForm","setStatus","toggleEditForm","edit","dispatch","a","toggleLoading","res","data","CHANGE_SHOW_FRIENDS","friends","showFriends","SET_AUTH_DATA","SET_CAPTCHA_URL","captchaUrl","setAuthData","payload","setCaptchaUrl","getAuthMe","resultCode","getCaptcha","url","SET_INITIALIZATION","initialized","rootReducer","combineReducers","profilePage","newPost","newMessagePost","photos","dialogPage","sidebar","usersPage","usersReducer","app","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","Settings","News","Music","NavbarContainer","changeShowFriends","map","u","navbar","navbarItems","item","activeClassName","listFriends","ProfileStatus","editMode","setEditMode","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","reduxForm","onSubmit","handleSubmit","info_form","Field","placeholder","component","Object","keys","contacts","key","Info","isOwner","onEditMode","info","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","React","memo","ProfileInfo","loading","photoUpload","profileInfoBlock","alt","width","height","src","large","ava","Preloader","target","files","Post","profilePhoto","post_item","like","MyPosts","addPost","postsElement","reverse","p","heading","add_post","AddPostReduxForm","validate","required","maxLength10","ProfileContainer","Number","this","match","params","myId","changeProfile","prevProps","prevState","snapshot","content","compose","Photofile","getState","errorMessage","length","stopSubmit","_error","withRouter","Header","header","HeaderApiContainer","HeaderContainer","maxLength100","Dialogs","lazy","UsersContainer","App","initializeApp","path","render","fallback","exact","promise","Promise","all","ReactDOM","document","getElementById","maxLengthValid","maxLength","UNFOLLOW","FOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_LOADING","TOGGLE_FOLLOWING_PROGRESS","users","totalCount","followingProgress","followed","isLoading","filter","successedFollow","successedUnfollow","setCurrentPage","toggleFollowingProgress","requestUsers","items","preloader"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,gICCpDC,EAAkB,wCAmBpBC,EAA+B,CAC/BC,QAAS,CACL,CAACC,GAAIC,cAAMC,KAAM,SACjB,CAACF,GAAIC,cAAMC,KAAM,SAErBC,SAAU,CACN,CAACH,GAAIC,cAAMG,QAAS,YAIfC,EAAgB,WAA0F,IAAzFC,EAAwF,uDAAhER,EAAcS,EAAkD,uCAClH,OAAQA,EAAOC,MACX,KAAKX,EACD,IAAIY,EAAa,CACbT,GAAIC,cACJG,QAASG,EAAOE,YAEpB,OAAO,2BACAH,GADP,IAEIH,SAAS,GAAD,mBAAMG,EAAMH,UAAZ,CAAsBM,MAEtC,QACI,OAAOH,IAINI,EAAc,SAACD,GACxB,MAAO,CAACD,KAAMX,EAAiBY,WAAYA,K,mBC/C/Cd,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,4BAA4B,KAAO,qBAAqB,OAAS,uBAAuB,QAAU,wBAAwB,YAAc,8B,oHCQlMe,EAAkB,SAACL,GACrB,MAAO,CACHM,OAAQN,EAAMO,KAAKD,SAKpB,SAASE,EAAoBC,GAYhC,OAF4BC,YAAQL,EAARK,EARF,SAACC,GAA8B,IAC9CL,EAAwBK,EAAxBL,OAAWM,EADkC,YACrBD,EADqB,YAGpD,OAAKL,EAEE,cAACG,EAAD,eAAeG,IAFF,cAAC,IAAD,CAAUC,GAAI,gB,0CCpB1CxB,EAAOC,QAAU,CAAC,MAAQ,uB,gCCD1B,qJAGMwB,EAHN,OAGiBC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAW,CACpBC,SADoB,SACXC,EAAqBC,GAC1B,OAAOT,EAASU,IAAT,qBAA2BF,EAA3B,kBAAgDC,KAE3DE,OAJoB,SAIbC,GACH,OAAOZ,EAASa,KAAT,iBAAwBD,KAEnCE,SAPoB,SAOXF,GACL,OAAOZ,EAASe,OAAT,iBAA0BH,MAI5BI,EAAa,CACtBC,WADsB,SACXL,GACP,OAAOZ,EAASU,IAAT,kBAAwBE,KAEnCM,UAJsB,SAIZN,GACN,OAAOZ,EAASU,IAAT,yBAA+BE,KAE1CO,aAPsB,SAOTC,GACT,OAAOpB,EAASqB,IAAI,iBAAkB,CAACD,OAAQA,KAEnDE,YAVsB,SAUVC,GACR,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBvB,EAASqB,IAAI,gBAAiBG,EAAU,CAACnB,QAAS,CAAC,eAAgB,0BAE9EsB,gBAfsB,SAeNH,GACZ,OAAOxB,EAASqB,IAAI,UAAWG,KAI1BI,EAAU,CACnBC,OADmB,WAEf,OAAO7B,EAASU,IAAT,YAEXoB,MAJmB,SAIbC,EAAeC,EAAkBC,EAAqBC,GACxD,OAAOlC,EAASa,KAAK,aAAc,CAACkB,QAAOC,WAAUC,aAAYC,aAErEC,OAPmB,WAQf,OAAOnC,EAASe,OAAO,gBAIlBqB,EAAc,CACvBC,cADuB,WAEnB,OAAOrC,EAASU,IAAI,+B,mIChDf4B,EAAoC,SAACzC,GAAW,IAErD0C,EAGA1C,EAHA0C,eACAC,EAEA3C,EAFA2C,WACAC,EACA5C,EADA4C,MAJoD,EAOjCC,oBAAkB,GAPe,mBAOjDC,EAPiD,KAO7CC,EAP6C,KAexD,OACI,8BACI,wBACIC,aAVK,SAACC,GACdF,GAAS,IAUDG,aARK,SAACD,GACdF,GAAS,IAQDI,UAAWL,EAAKM,IAAEC,OAASD,IAAEE,OAC7BC,QAASb,EACTE,MAAOA,EALX,SAOKD,Q,sJC9BJa,EAAW,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAAS1D,EAAgB,gCAEhD2D,EAAWD,EAAKE,SAAWF,EAAKG,MAEtC,OACI,sBAAKV,UAAS,UAAKC,IAAEU,YAAP,YAAsBH,GAAYP,IAAES,OAAlD,UACI,8BACI,oDAAcJ,GAAWzD,MAE5B2D,GAAY,+BAAOD,EAAKG,YAKxBE,EAAQ,SAAC,GAAkC,IAAjCN,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAAS1D,EAAgB,gCAE7C2D,EAAWD,EAAKE,SAAWF,EAAKG,MAEtC,OACI,sBAAKV,UAAS,UAAKC,IAAEU,YAAP,YAAsBH,GAAYP,IAAES,OAAlD,UACI,8BACI,iDAAWJ,GAAWzD,MAEzB2D,GAAY,+BAAOD,EAAKG,a,kFCZtBG,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,+ECFRQ,EAAe,sCACfC,EAAmB,0CACnBC,EAAa,oCACbC,EAAa,oCACbC,EAAmB,0CAqCrBhG,EAAe,CACfiG,MAAO,CACH,CAAC/F,GAAIC,cAAMG,QAAS,kBAAmB4F,MAAO,IAC9C,CAAChG,GAAIC,cAAMG,QAAS,SAAU4F,MAAO,GACrC,CAAChG,GAAIC,cAAMG,QAAS,aAAc4F,MAAO,IAE7CC,YAAa,KACbC,UAAU,EACV1D,OAAQ,IAkDC2D,EAAY,SAAC3D,GACtB,MAAO,CAAChC,KAAMoF,EAAYpD,OAAQA,IAKzB4D,EAAiB,SAACC,GAC3B,MAAO,CAAC7F,KAAMsF,EAAkBO,KAAMA,IAK7BhE,EAAa,SAACL,GAAD,8CAAyC,WAAMsE,GAAN,eAAAC,EAAA,6DAC/DD,EAASE,aAAc,IADwC,SAE7CpE,IAAWC,WAAWL,GAFuB,OAEzDyE,EAFyD,OAI/DH,EAASE,aAAc,IACvBF,GApB2BL,EAoBHQ,EAAIC,KAnBrB,CAAClG,KAAMmF,EAAkBM,YAAaA,KAckB,iCAfrC,IAACA,IAeoC,OAAzC,uD,SCpHpBU,EAAsB,6CActB7G,EAA4B,CAC9B8G,QAAS,CACL,CAAC5G,GAAIC,cAAMC,KAAM,SACjB,CAACF,GAAIC,cAAMC,KAAM,QACjB,CAACF,GAAIC,cAAMC,KAAM,SACjB,CAACF,GAAIC,cAAMC,KAAM,SAErB2G,aAAa,GCnBXC,EAAgB,oCAChBC,EAAkB,sCAclBjH,EAAe,CACjBE,GAAI,KACJmD,MAAO,KACPD,MAAO,KACPtC,QAAQ,EACRoG,WAAY,MAkBHC,EAAc,SAACjH,EAAmBmD,EAAsBD,EAAsBtC,GACvF,MAAO,CAACJ,KAAMsG,EAAeI,QAAS,CAAClH,KAAImD,QAAOD,QAAOtC,OAAQA,KAExDuG,EAAgB,SAACH,GAC1B,MAAO,CAACxG,KAAMuG,EAAiBG,QAAS,CAACF,gBAKhCI,EAAY,yDAAoB,WAAMd,GAAN,uBAAAC,EAAA,sEAEvBvD,IAAQC,SAFe,cAGb,KADtBwD,EAFmC,QAGjCC,KAAKW,aAAmB,EACDZ,EAAIC,KAAKA,KAA7B1G,EADoB,EACpBA,GAAImD,EADgB,EAChBA,MAAOD,EADS,EACTA,MAClBoD,EAASW,EAAYjH,EAAImD,EAAOD,GAAO,KALF,kBAOlCuD,GAPkC,2CAApB,uDAiCZa,EAAa,yDAAoB,WAAMhB,GAAN,eAAAC,EAAA,sEACxB/C,IAAYC,gBADY,OACpCgD,EADoC,OAE1CH,EAASa,EAAcV,EAAIC,KAAKa,MAFU,2CAApB,uDCjFpBC,EAAqB,wCAQrB1H,EAA8B,CAChC2H,aAAa,G,kBCCXC,EAAcC,YAAgB,CAChCC,YJ+C0B,WAAyF,IAAxFtH,EAAuF,uDAA9DR,EAAcS,EAAgD,uCAClH,OAAQA,EAAOC,MACX,KAAKkF,EACD,IAAImC,EAAU,CACV7H,GAAIC,cACJG,QAASG,EAAOuH,eAChB9B,MAAO,GAEX,OAAO,2BACA1F,GADP,IAEIyF,MAAM,GAAD,mBAAMzF,EAAMyF,OAAZ,CAAmB8B,MAEhC,KAAKlC,EACD,OAAO,2BACArF,GADP,IAEI2F,YAAa1F,EAAO0F,cAE5B,KAAKL,EACD,OAAO,2BACAtF,GADP,IAEIkC,OAAQjC,EAAOiC,SAEvB,KAAKqD,EACD,OAAO,2BACAvF,GADP,IAEI2F,YAAY,2BAAK3F,EAAM2F,aAAZ,IAAyB8B,OAAQxH,EAAOwH,WAE3D,KAAKjC,EACD,OAAO,2BACAxF,GADP,IAEI4F,SAAU3F,EAAO8F,OAEzB,QACI,OAAO/F,II/Ef0H,WAAY3H,IACZ4H,QHU0B,WAAiF,IAAhF3H,EAA+E,uDAA1DR,EAAcS,EAA4C,uCAC1G,OAAQA,EAAOC,MACX,KAAKmG,EACD,OAAO,2BACArG,GADP,IAEIuG,aAAcvG,EAAMuG,cAE5B,QACI,OAAOvG,IGjBf4H,UAAWC,IACXtH,KFSuB,WAAuE,IAAtEP,EAAqE,uDAAnDR,EAAcS,EAAqC,uCAC7F,OAAQA,EAAOC,MACX,KAAKsG,EACL,KAAKC,EACD,OAAO,2BACAzG,GACAC,EAAO2G,SAElB,QACI,OAAO5G,IEjBf8H,IDJsB,WAAsF,IAArF9H,EAAoF,uDAA7DR,EAAcS,EAA+C,uCAC3G,OAAQA,EAAOC,MACX,KAAKgH,EACD,OAAO,2BACAlH,GADP,IAEImH,aAAa,IAErB,QACI,OAAOnH,ICHf+H,KAAMC,MAGGC,EAAQC,YAAYd,EAAae,YAAgBC,M,yECvBjDC,EAAW,WACpB,OACI,4CCFKC,EAAO,WAChB,OACI,wCCFKC,EAAQ,WACjB,OACI,yC,4CCkBKC,GAAkB9H,cANP,SAACV,GACrB,MAAO,CACH2H,QAAS3H,EAAM2H,WAIiC,CAACc,kBPkBxB,WAC7B,MAAO,CAACvI,KAAMmG,KOnBa3F,ECdkB,SAACC,GAAW,IAErD8H,EAEA9H,EAFA8H,kBACAd,EACAhH,EADAgH,QAGErB,EAAUqB,EAAQrB,QAAQoC,KAAI,SAACC,GAAD,OAAO,wCAAUA,EAAEjJ,OAEvD,OACI,sBAAKoE,UAAWC,KAAE6E,OAAlB,UACI,sBAAK9E,UAAWC,KAAE8E,YAAlB,UACI,qBAAK/E,UAAWC,KAAE+E,KAAlB,SACI,cAAC,IAAD,CAASjI,GAAG,WAAWkI,gBAAiBhF,KAAEC,OAA1C,uBAEJ,qBAAKF,UAAWC,KAAE+E,KAAlB,SACI,cAAC,IAAD,CAASjI,GAAG,WAAWkI,gBAAiBhF,KAAEC,OAA1C,uBAEJ,qBAAKF,UAAWC,KAAE+E,KAAlB,SACI,cAAC,IAAD,CAASjI,GAAG,SAASkI,gBAAiBhF,KAAEC,OAAxC,qBAEJ,qBAAKF,UAAWC,KAAE+E,KAAlB,SACI,cAAC,IAAD,CAASjI,GAAG,QAAQkI,gBAAiBhF,KAAEC,OAAvC,oBAEJ,qBAAKF,UAAWC,KAAE+E,KAAlB,SACI,cAAC,IAAD,CAASjI,GAAG,SAASkI,gBAAiBhF,KAAEC,OAAxC,qBAEJ,qBAAKF,UAAWC,KAAE+E,KAAlB,SACI,cAAC,IAAD,CAASjI,GAAG,YAAYkI,gBAAiBhF,KAAEC,OAA3C,2BAIR,yCACA,sBAAKF,UAAWC,KAAEiF,YAAlB,UACI,qBAAKlF,UAAWC,KAAEuC,QAAlB,SACKqB,EAAQpB,aAAeD,IAE3BqB,EAAQpB,YAAc,cAACnD,GAAA,EAAD,CAAQC,eAAgBoF,EAAmBnF,WAAY,iBAC1E,cAACF,GAAA,EAAD,CAAQC,eAAgBoF,EAAmBnF,WAAY,0B,2DCpC9D2F,GAAgB,SAACtI,GAAmC,IAAD,EAE5B6C,oBAAkB,GAFU,oBAErD0F,EAFqD,KAE3CC,EAF2C,OAGhC3F,mBAAiB,IAHe,oBAGrDtB,EAHqD,KAG7C2D,EAH6C,KAK5DuD,qBAAU,WACNvD,EAAUlF,EAAMuB,UACjB,CAACvB,EAAMuB,SAaV,OACI,iCACMgH,GACF,8BACQ,sBAAMG,cAfG,WACrBF,GAAY,IAcA,SACKxI,EAAMuB,OAASvB,EAAMuB,OAAS,mBAG1CgH,GACD,8BACI,uBACII,SAfO,SAACC,GACpB1D,EAAU0D,EAAEC,cAAcC,QAedC,WAAW,EACXC,OArBW,WACvBR,GAAY,GACZxI,EAAMsB,aAAaC,IAoBPuH,MAAOvH,U,sCCoBZ0H,gBAAsC,CACjD7B,KAAM,aADK6B,EA9CiF,SAACjJ,GAE7F,OACI,uBAAMkJ,SAAUlJ,EAAMmJ,aAAchG,UAAWC,KAAEgG,UAAjD,UACKpJ,EAAM6D,OAAS,qBAAKV,UAAWC,KAAES,MAAlB,SAA0B7D,EAAM6D,QAChD,gCACI,8CAAoB,cAACwF,GAAA,EAAD,CAAOC,YAAa,gBACbrK,KAAM,WACNsK,UAAWxF,UAG1C,gCACI,4CAAkB,cAACsF,GAAA,EAAD,CAAOC,YAAa,gBACbrK,KAAM,UACNsK,UAAW/F,UAGxC,gCACI,mDAAyB,cAAC6F,GAAA,EAAD,CAAOpK,KAAM,iBACNsK,UAAWxF,KACXxE,KAAM,gBAG1C,gCACI,8DAAoC,cAAC8J,GAAA,EAAD,CAAOC,YAAa,gBACbrK,KAAM,4BACNsK,UAAW/F,UAG1D,gCACI,4CACCxD,EAAMgF,aAAewE,OAAOC,KAAKzJ,EAAMgF,YAAY0E,UAAU3B,KAAI,SAAC4B,GAC/D,OAAO,gCACH,kCAAKA,EAAL,QAAe,cAACN,GAAA,EAAD,CAAOC,YAAa,gBACbrK,KAAM,YAAc0K,EACpBJ,UAAWxF,SAHpB4F,SAQzB,qBAAK/G,MAAO,CAAC,UAAa,QAA1B,SACI,cAACH,GAAA,EAAD,CAAQE,WAAY,sBC7CvBiH,GAAqB,SAAC5J,GAAW,IACnCgF,EAAoChF,EAApCgF,YAAa6E,EAAuB7J,EAAvB6J,QAASC,EAAc9J,EAAd8J,WAE7B,OACI,sBAAK3G,UAAWC,KAAE2G,KAAlB,UACI,gCACI,+CACY,OAAX/E,QAAW,IAAXA,OAAA,EAAAA,EAAagF,UAAWhF,EAAYgF,SAAW,mBACpD,gCACI,8CACY,OAAXhF,QAAW,IAAXA,OAAA,EAAAA,EAAaiF,SAAUjF,EAAYiF,QAAU,mBAClD,gCACI,sDACY,OAAXjF,QAAW,IAAXA,OAAA,EAAAA,EAAakF,gBAAiB,MAAQ,QAC3C,gCACI,4DACY,OAAXlF,QAAW,IAAXA,OAAA,EAAAA,EAAamF,2BAA4BnF,EAAYmF,0BAA4B,mBAErFN,GAAW,8BAAK,cAACpH,GAAA,EAAD,CAAQC,eAAgBoH,EAAYnH,WAAY,uBACjE,gCACI,4CACCqC,GAAewE,OAAOC,KAAKzE,EAAY0E,UAAU3B,KAAI,SAAC4B,GACnD,OAAO,cAACS,GAAD,CAAmBC,aAAcV,EAAKW,aAActF,EAAY0E,SAASC,IAA3DA,aAYnCS,GAAkCG,IAAMC,MAAK,SAACxK,GAAW,IAEvDqK,EAEArK,EAFAqK,aACAC,EACAtK,EADAsK,aAGJ,OACI,sBAAK1H,MAAO,CAAC,YAAe,QAA5B,UACI,qCAAQyH,EAAR,SACCC,GAA8B,sBCjC9BG,GAA6B,SAACzK,GAAW,IAE9CgF,EASAhF,EATAgF,YACA0F,EAQA1K,EARA0K,QACAb,EAOA7J,EAPA6J,QACAtI,EAMAvB,EANAuB,OACAD,EAKAtB,EALAsB,aACAqJ,EAIA3K,EAJA2K,YACA7I,EAGA9B,EAHA8B,gBACAmD,EAEAjF,EAFAiF,SACAE,EACAnF,EADAmF,eAUJ,OACI,sBAAKhC,UAAWC,KAAEwH,iBAAlB,UACI,iCACMF,GAAW1F,EACT,qBAAK6F,IAAK,GACLjI,MAAO,CAACkI,MAAO,QAASC,OAAQ,SAChCC,IAAKhG,EAAY8B,OAAOmE,MAAQjG,EAAY8B,OAAOmE,MAAQC,OAChE,cAACC,GAAA,EAAD,IAEJ,8BACKtB,GAAW,uBAAOtK,KAAM,OAAQoJ,SAjB3B,SAACC,GACnBA,EAAEwC,OAAOC,OAASV,EAAY/B,EAAEwC,OAAOC,MAAM,SAkBrC,qBAAKlI,UAAWC,KAAE7B,OAAlB,SACI,cAAC,GAAD,CAAeA,OAAQA,EAAQD,aAAcA,SAGpD2D,EACG,cAAC,GAAD,CAAiBD,YAAaA,EAAakE,SArBtC,SAACvH,GACdG,EAAgBH,MAqBR,cAAC,GAAD,CAAMqD,YAAaA,EAAa6E,QAASA,EAASC,WAAY,WAC1D3E,GAAe,U,wCClDtBmG,GAA4B,SAACtL,GAAW,IAE7Cb,EAGAa,EAHAb,QACA4F,EAEA/E,EAFA+E,MACAwG,EACAvL,EADAuL,aAGJ,OACI,sBAAKpI,UAAWC,KAAEoI,UAAlB,UACI,qBAAKX,IAAK,GAAIG,IAAKO,GAA8BL,OACjD,sBAAM/H,UAAWC,KAAEpC,KAAnB,SACK7B,IAEL,uBAAMgE,UAAWC,KAAEqI,KAAnB,oBACY1G,S,SCTX2G,GAA+BnB,IAAMC,MAAK,SAACxK,GAAW,IAE3D2L,EAGA3L,EAHA2L,QACA7G,EAEA9E,EAFA8E,MACAyG,EACAvL,EADAuL,aAGEK,EAAe,YAAI9G,GAAO+G,UAAU9D,KAAI,SAAC+D,GAAD,OAC1C,cAAC,GAAD,CAEA3M,QAAS2M,EAAE3M,QACX4F,MAAO+G,EAAE/G,MACTwG,aAAcA,GAHTO,EAAE/M,OAUX,OACI,gCACI,oBAAIoE,UAAWC,KAAE2I,QAAjB,4BACA,qBAAK5I,UAAWC,KAAE4I,SAAlB,SACI,cAACC,GAAD,CAAkB/C,SARX,SAACvH,GAChBgK,EAAQhK,EAASiF,cASb,qBAAKzD,UAAWC,KAAEpC,KAAlB,SAEK4K,UA4BJK,GAAmBhD,aAA4B,CACxD7B,KAAM,cADsB6B,EAjBmC,SAACjJ,GAEhE,OACI,sBAAMkJ,SAAUlJ,EAAMmJ,aAAtB,SAEI,gCACI,cAACE,GAAA,EAAD,CAAOC,YAAa,kBACbrK,KAAM,UACNsK,UAAW/F,KACX0I,SAAU,CAACC,KAAUC,QAE5B,cAAC3J,GAAA,EAAD,CAAQE,WAAY,qB,UCnB9B0J,G,mKAEF,WACI,IAAItL,EAASuL,OAAOC,KAAKvM,MAAMwM,MAAMC,OAAO1L,QACvCA,IACFA,EAASwL,KAAKvM,MAAM0M,MAEvBH,KAAKvM,MAAMoB,WAAWL,GACtBwL,KAAKvM,MAAMqB,UAAUN,K,+BAGzB,WACIwL,KAAKI,kB,gCAGT,SAAmBC,EAAgCC,EAAyBC,GACpEP,KAAKvM,MAAMwM,MAAMC,OAAO1L,SAAW6L,EAAUJ,MAAMC,OAAO1L,QAC1DwL,KAAKI,kB,oBAIb,WACI,OACI,sBAAKxJ,UAAWC,KAAE2J,QAAlB,UACI,cAAC,GAAD,CACI/H,YAAauH,KAAKvM,MAAMgF,YACxB0F,QAAS6B,KAAKvM,MAAM0K,QACpBb,SAAU0C,KAAKvM,MAAMwM,MAAMC,OAAO1L,OAClCQ,OAAQgL,KAAKvM,MAAMuB,OACnBD,aAAciL,KAAKvM,MAAMsB,aACzBqJ,YAAa4B,KAAKvM,MAAM2K,YACxB7I,gBAAiByK,KAAKvM,MAAM8B,gBAC5BmD,SAAUsH,KAAKvM,MAAMiF,SACrBE,eAAgBoH,KAAKvM,MAAMmF,iBAE/B,cAACuG,GAAD,CACI5G,MAAOyH,KAAKvM,MAAM8E,MAClB6G,QAASY,KAAKvM,MAAM2L,QACpBJ,aAAcgB,KAAKvM,MAAMuL,sB,GAtCdhB,IAAMzK,WA0DtBkN,eACXjN,cAdoB,SAACV,GAAgD,IAAD,IACpE,MAAO,CACHyF,MAAOzF,EAAMsH,YAAY7B,MACzBE,YAAa3F,EAAMsH,YAAY3B,YAC/B0F,QAASrL,EAAM4H,UAAUyD,QACzB/K,OAAQN,EAAMO,KAAKD,OACnB+M,KAAMrN,EAAMO,KAAKb,GACjBwC,OAAQlC,EAAMsH,YAAYpF,OAC1BgK,aAAY,UAAElM,EAAMsH,YAAY3B,mBAApB,iBAAE,EAA+B8B,cAAjC,aAAE,EAAuCmE,MACrDhG,SAAU5F,EAAMsH,YAAY1B,YAKP,CAAC0G,QhBJP,SAAC9E,GACpB,MAAO,CAACtH,KAAMkF,EAAcoC,eAAgBA,IgBGTzF,aAAYC,UhBsB1B,SAACN,GAAD,8CAAyC,WAAMsE,GAAN,eAAAC,EAAA,6DAE9DD,EAASE,aAAc,IAFuC,SAG5CpE,IAAWE,UAAUN,GAHuB,OAGxDyE,EAHwD,OAK9DH,EAASE,aAAc,IACvBF,EAASH,EAAUM,EAAIC,OANuC,2CAAzC,uDgBtBqCnE,ahBgClC,SAACC,GAAD,8CAAkC,WAAM8D,GAAN,SAAAC,EAAA,+EAEpCnE,IAAWG,aAAaC,GAFY,OAG1B,IAH0B,OAG9CkE,KAAKW,YACTf,EAASH,EAAU3D,IAJ+B,yGAAlC,uDgBhCgDoJ,YhB2CjD,SAACsC,GAAD,8CAAkC,WAAM5H,GAAN,eAAAC,EAAA,sEACvCnE,IAAWM,YAAYwL,GADgB,OAG7B,KAFtBzH,EADmD,QAGjDC,KAAKW,YACTf,GA1CkByB,EA0CCtB,EAAIC,KAAKA,KAAKqB,OAzC9B,CAACvH,KAAMqF,EAAYkC,OAAQA,KAqCuB,iCAtCpC,IAACA,IAsCmC,OAAlC,uDgB3C8DhF,gBhBkD1D,SAACH,GAAD,8CAA0C,WAAO0D,EAAU6H,GAAjB,mBAAA5H,EAAA,6DAC/DoH,EAAOQ,IAAWtN,KAAKb,GADwC,SAEnDoC,IAAWW,gBAAgBH,GAFwB,OAIzC,KAFtB6D,EAF+D,QAI7DC,KAAKW,YACTf,EAASjE,EAAWsL,IACpBrH,EAASF,GAAe,MAGlBgI,EAAe3H,EAAIC,KAAKvG,SAASkO,OAAS,EAAI5H,EAAIC,KAAKvG,SAAS,GAAK,cAC3EmG,EAASgI,YAAW,YAAa,CAACC,OAAQH,MAVuB,2CAA1C,yDgBlD2EhI,mBACtGoI,IACA1N,KAHWmN,CAIbX,I,qBChGWmB,GAAS,SAACxN,GACnB,OACI,wBAAQmD,UAAWC,KAAEqK,OAArB,SACI,qBAAKtK,UAAWC,KAAEnB,MAAlB,SACKjC,EAAML,OACH,oCAAOK,EAAMiC,MAAb,IAAoB,cAACQ,GAAA,EAAD,CAAQC,eAAgB1C,EAAMsC,OAAQK,WAAY,WAAtE,OACE,cAAC,IAAD,CAASzC,GAAI,SAAb,wBCDTwN,GAAb,4JAEI,WACI,OACI,cAAC,GAAD,CACI/N,OAAQ4M,KAAKvM,MAAML,OACnBsC,MAAOsK,KAAKvM,MAAMiC,MAClBK,OAAQiK,KAAKvM,MAAMsC,aAPnC,GAAwCiI,IAAMzK,WAoBjC6N,GAAkB5N,cAPP,SAACV,GACrB,MAAO,CACHM,OAAQN,EAAMO,KAAKD,OACnBsC,MAAO5C,EAAMO,KAAKqC,SAI8B,CAACK,OhBuCnC,yDAAoB,WAAM+C,GAAN,SAAAC,EAAA,sEAEpBvD,IAAQO,SAFY,OAGV,IAHU,OAG9BmD,KAAKW,aACTf,EAASW,EAAY,KAAM,KAAM,MAAM,IACvCX,EAASa,EAAc,QALW,2CAApB,wDgBvCSnG,CAAoC2N,I,qBCepDzE,gBAAkC,CAC7C7B,KAAM,SADK6B,EAvCuE,SAACjJ,GACnF,OACI,uBAAMkJ,SAAUlJ,EAAMmJ,aAAtB,UACI,8BACI,cAACE,GAAA,EAAD,CAAOC,YAAa,QACbrK,KAAM,QACNsK,UAAWxF,KACXmI,SAAU,CAACC,KAAUyB,UAGhC,8BACI,cAACvE,GAAA,EAAD,CAAOC,YAAa,WACbrK,KAAM,WACNsK,UAAWxF,KACXmI,SAAU,CAACC,KAAUyB,UAGhC,gCACI,cAACvE,GAAA,EAAD,CAAOE,UAAWxF,KACX9E,KAAM,aACNM,KAAM,aAHjB,kBAMCS,EAAM+F,YAAc,qBAAKiF,IAAKhL,EAAM+F,aACpC/F,EAAM+F,YACP,8BACI,cAACsD,GAAA,EAAD,CAAOC,YAAa,2BACbC,UAAWxF,KACX9E,KAAM,cAGhBe,EAAM6D,OAAS,qBAAKV,UAAWC,KAAES,MAAlB,SAA0B7D,EAAM6D,QAChD,8BACI,cAACpB,GAAA,EAAD,CAAQE,WAAY,kBCArB5C,iBAJS,SAACV,GAAD,MAAiD,CACrEM,OAAQN,EAAMO,KAAKD,OACnBoG,WAAY1G,EAAMO,KAAKmG,cAEa,CAAC9D,MlBgBpB,SAACC,EAAeC,EAAkBC,EAAqBC,GAAvD,8CAAyF,WAAMgD,GAAN,iBAAAC,EAAA,sEAExFvD,IAAQE,MAAMC,EAAOC,EAAUC,EAAYC,GAF6C,OAG9E,KADtBmD,EAFoG,QAGlGC,KAAKW,WACTf,EAASc,MAEmB,KAAxBX,EAAIC,KAAKW,YACTf,EAASgB,KAEP8G,EAAe3H,EAAIC,KAAKvG,SAASkO,OAAS,EAAI5H,EAAIC,KAAKvG,SAAS,GAAK,cAC3EmG,EAASgI,YAAW,QAAS,CAACC,OAAQH,MAVgE,2CAAzF,wDkBhBNpN,EAxBkD,SAACC,GAAW,IAElEiC,EAA6BjC,EAA7BiC,MAAOtC,EAAsBK,EAAtBL,OAAQoG,EAAc/F,EAAd+F,WAMtB,OAAGpG,EACO,cAAC,IAAD,CAAUO,GAAI,aAIpB,gCACI,uCACA,cAAC,GAAD,CAAW6F,WAAYA,EAAYmD,SAX1B,SAACvH,GACdM,EAAMN,EAASO,MAAOP,EAASQ,SAAUR,EAASS,WAAYT,EAASU,kBCVzEwL,GAAUtD,IAAMuD,MAAK,kBAAM,iCAC3BC,GAAiBxD,IAAMuD,MAAK,kBAAM,iCAUlCE,G,uKAEF,WACIzB,KAAKvM,MAAMiO,kB,oBAGf,WACI,OAAK1B,KAAKvM,MAAMwG,YAIZ,sBAAKrD,UAAU,cAAf,UACI,cAACwK,GAAD,IACA,cAAC9F,GAAD,IACA,qBAAK1E,UAAW,sBAAhB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO+K,KAAK,oBAAoBC,OAAQ,kBAAM,cAAC,GAAD,OAC9C,cAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQ,WAC3B,OAAO,cAAC,WAAD,CAAUC,SAAU,cAACjD,GAAA,EAAD,IAApB,SACH,cAAC0C,GAAD,SAGR,cAAC,IAAD,CAAOK,KAAK,SAASC,OAAQ,WACzB,OAAO,cAAC,WAAD,CAAUC,SAAU,cAACjD,GAAA,EAAD,IAApB,SACH,cAAC4C,GAAD,SAGR,cAAC,IAAD,CAAOG,KAAK,SAASC,OAAQ,kBAAM,cAAC,EAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,QAAQC,OAAQ,kBAAM,cAAC,EAAD,OAClC,cAAC,IAAD,CAAOD,KAAK,YAAYC,OAAQ,kBAAM,cAAC,EAAD,OACtC,cAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,kBAAkBC,OAAQ,kBAAM,cAAC,IAAD,CAAUjO,GAAI,gBAC1D,cAAC,IAAD,CAAOmO,OAAK,EAACH,KAAK,IAAIC,OAAQ,kBAAM,cAAC,IAAD,CAAUjO,GAAI,gBAClD,cAAC,IAAD,CAAOgO,KAAK,IAAIC,OAAQ,kBAAM,2DAzBnC,cAAChD,GAAA,EAAD,Q,GARDZ,IAAMzK,WA+CTkN,eACXjN,cAPoB,SAACV,GACrB,MAAO,CACHmH,YAAanH,EAAM8H,IAAIX,eAKF,CAACyH,clBxCD,kBAAoB,SAAA5I,GAE7C,IAAMiJ,EAAUjJ,EAASc,KAEzBoI,QAAQC,IAAI,CAACF,IACRnK,MAAK,WACFkB,EAXD,CAAC9F,KAAMgH,WkB8CdgH,IAFWP,CAECgB,ICnEhBS,IAASN,OACL,cAAC,KAAD,CAAU7G,MAAOA,EAAjB,SACI,cAAC,IAAD,UACI,cAAC,GAAD,QAGRoH,SAASC,eAAe,SAE5B3K,K,mBChBAtF,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,OAAS,4BAA4B,KAAO,0BAA0B,UAAY,+BAA+B,MAAQ,6B,gCCDpM,sGAAO,IAAMwN,EAAW,SAACrD,GACrB,IAAIA,EACJ,MAAO,+BAGL8F,EAAiB,SAACC,GAAD,OAAuB,SAAC/F,GAC3C,OAAIA,EAAMsE,OAASyB,EACT,iBAAN,OAAwBA,EAAxB,kBAEA,IAGKzC,EAAcwC,EAAe,IAC7BhB,EAAegB,EAAe,M,6PCTrCE,EAAW,gCACXC,EAAS,8BACTC,EAAY,iCACZC,EAAmB,wCACnBC,EAAkB,uCAClBC,EAAiB,sCACjBC,EAA4B,iDAyC5BvQ,EAA8B,CAChCwQ,MAAO,GACPzO,MAAO,GACP0O,WAAY,EACZ3O,YAAa,EACb+J,SAAS,EACT6E,kBAAmB,IAGVrI,EAAe,WAAmF,IAAlF7H,EAAiF,uDAA1DR,EAAcS,EAA4C,uCAC1G,OAAQA,EAAOC,MACX,KAAKwP,EACD,OAAO,2BACA1P,GADP,IAEIgQ,MAAOhQ,EAAMgQ,MAAMtH,KAAI,SAAAC,GACnB,OAAIA,EAAEjJ,KAAOO,EAAOyB,OACT,2BAAIiH,GAAX,IAAcwH,UAAU,IAErBxH,OAGnB,KAAK8G,EACD,OAAO,2BACAzP,GADP,IAEIgQ,MAAOhQ,EAAMgQ,MAAMtH,KAAI,SAAAC,GACnB,OAAIA,EAAEjJ,KAAOO,EAAOyB,OACT,2BAAIiH,GAAX,IAAcwH,UAAU,IAErBxH,OAGnB,KAAKgH,EACD,OAAO,2BACA3P,GADP,IAEIgQ,MAAO/P,EAAO+P,QAEtB,KAAKJ,EACD,OAAO,2BACA5P,GADP,IAEIsB,YAAarB,EAAOqB,cAE5B,KAAKuO,EACD,OAAO,2BACA7P,GADP,IAEIiQ,WAAYhQ,EAAOgQ,aAE3B,KAAKH,EACD,OAAO,2BACA9P,GADP,IAEIqL,QAASpL,EAAOoL,UAExB,KAAK0E,EACD,OAAO,2BACA/P,GADP,IAEIkQ,kBAAmBjQ,EAAOmQ,UAAP,sBACTpQ,EAAMkQ,mBADG,CACgBjQ,EAAOyB,SACpC1B,EAAMkQ,kBAAkBG,QAAO,SAAA3Q,GAAE,OAAIA,IAAOO,EAAOyB,YAEjE,QACI,OAAO1B,IAMNsQ,EAAkB,SAAC5O,GAC5B,MAAO,CAACxB,KAAMwP,EAAQhO,OAAQA,IAErB6O,EAAoB,SAAC7O,GAC9B,MAAO,CAACxB,KAAMuP,EAAU/N,OAAQA,IAKvB8O,EAAiB,SAAClP,GAC3B,MAAO,CAACpB,KAAM0P,EAAkBtO,YAAaA,IAKpC4E,EAAgB,SAACmF,GAC1B,MAAO,CAACnL,KAAM4P,EAAgBzE,QAASA,IAE9BoF,EAA0B,SAACL,EAAoB1O,GACxD,MAAO,CAACxB,KAAM6P,EAA2BK,UAAWA,EAAW1O,OAAQA,IAK9DgP,EAAe,SAACpP,EAAqBC,GAAtB,8CAAsD,WAAMyE,GAAN,eAAAC,EAAA,6DAC9ED,EAASwK,EAAelP,IACxB0E,EAASE,GAAc,IAFuD,SAG5D9E,IAASC,SAASC,EAAaC,GAH6B,OAGxE4E,EAHwE,OAI9EH,EAASE,GAAc,IACvBF,GAvBqBgK,EAuBH7J,EAAIC,KAAKuK,MAtBpB,CAACzQ,KAAMyP,EAAWK,MAAOA,KAuBhChK,GAlB0BiK,EAkBH9J,EAAIC,KAAK6J,WAjBzB,CAAC/P,KAAM2P,EAAiBI,WAAYA,KAWmC,iCAZrD,IAACA,EANLD,IAkByD,OAAtD,uDASfvO,EAAS,SAACC,GAAD,8CAAkC,WAAMsE,GAAN,SAAAC,EAAA,6DACpDD,EAASyK,GAAwB,EAAM/O,IADa,SAElCN,IAASK,OAAOC,GAFkB,OAGxB,IAHwB,OAG5C0E,KAAKW,YACTf,EAASsK,EAAgB5O,IAE7BsE,EAASyK,GAAwB,EAAO/O,IANY,2CAAlC,uDAWTE,EAAW,SAACF,GAAD,8CAAkC,WAAMsE,GAAN,SAAAC,EAAA,6DACtDD,EAASyK,GAAwB,EAAM/O,IADe,SAEpCN,IAASQ,SAASF,GAFkB,OAG1B,IAH0B,OAG9C0E,KAAKW,YACTf,EAASuK,EAAkB7O,IAE/BsE,EAASyK,GAAwB,EAAO/O,IANc,2CAAlC,wD,kEChKT,UAA0B,sC,cCG5BoK,EAAY,WACrB,OACI,8BACI,qBAAKN,IAAK,mBAAoBG,IAAKiF,Q,mBCL/CvR,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,8B,gCCD3D,QAA0B,oC,mBCCzCD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,0BAA0B,KAAO,wB,mBCAjGD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,KAAO,mBAAmB,KAAO,qB,mBCAvFD,EAAOC,QAAU,CAAC,OAAS,wBAAwB,OAAS,2B","file":"static/js/main.f65cda2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header___SfV1\",\"login\":\"Header_login__3bWw6\"};","import {v1} from \"uuid\";\r\n\r\nconst ADD_NEW_MESSAGE = 'SOCIAL-NETWORK/DIALOG/ADD-NEW-MESSAGE'\r\n\r\nexport type DialogPageActionsType = AddMessageActionType\r\n\r\ntype AddMessageActionType = ReturnType<typeof sendMessage>\r\n\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nlet initialState: DialogPageType = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Alena'},\r\n        {id: v1(), name: 'Dima'},\r\n    ],\r\n    messages: [\r\n        {id: v1(), message: 'hello!'},\r\n    ],\r\n}\r\n\r\nexport const dialogReducer = (state: DialogPageType = initialState, action: DialogPageActionsType): DialogPageType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_MESSAGE:\r\n            let newMessage = {\r\n                id: v1(),\r\n                message: action.newMessage,\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessage = (newMessage: string) => {\r\n    return {type: ADD_NEW_MESSAGE, newMessage: newMessage} as const\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__3JtJA\",\"navbarItems\":\"Navbar_navbarItems__3IyF9\",\"item\":\"Navbar_item__3px6H\",\"active\":\"Navbar_active__2GpVG\",\"friends\":\"Navbar_friends__2MIms\",\"listFriends\":\"Navbar_listFriends__2UX4P\"};","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/Redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    const RedirectedComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return RedirectedComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__26nHC\"};","import axios from \"axios\";\r\nimport {InfoFormType} from \"../components/profile/profileInfo/ProfileInfoForm\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b173ba34-22d3-4323-a92a-0dbd941b56f3'\r\n    }\r\n})\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number, count: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${count}`)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: number | null) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status', {status: status})\r\n    },\r\n    updatePhoto(photofile: any) {\r\n        const formData = new FormData()\r\n        formData.append('image', photofile)\r\n        return instance.put('profile/photo', formData, {headers: {'Content-Type': 'multipart/form-data'}})\r\n    },\r\n    saveProfileInfo(formData: InfoFormType) {\r\n        return instance.put('profile', formData)\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n    authMe() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: string) {\r\n        return instance.post('auth/login', {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptchaUrl() {\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n\r\n\r\n","import React, {MouseEvent, useState} from \"react\";\r\nimport s from './Buttons.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    onClickHandler?: () => void\r\n    buttonName?: string\r\n    style?: {}\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    const {\r\n        onClickHandler,\r\n        buttonName,\r\n        style,\r\n    } = props\r\n\r\n    const [st, setStyle] = useState<boolean>(false)\r\n    const setClass = (event: MouseEvent<HTMLButtonElement>) => {\r\n        setStyle(true)\r\n    }\r\n    const delClass = (event: MouseEvent<HTMLButtonElement>) => {\r\n        setStyle(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                onMouseEnter={setClass}\r\n                onMouseLeave={delClass}\r\n                className={st ? s.active : s.button}\r\n                onClick={onClickHandler}\r\n                style={style}\r\n            >\r\n                {buttonName}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport s from './FormElements.module.css'\r\n\r\nexport const Textarea = ({input, meta, ...props}: any) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.formElement} ${hasError && s.error}`}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.formElement} ${hasError && s.error}`}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {v1} from \"uuid\";\r\nimport {profileApi} from \"../api/api\";\r\nimport {toggleLoading} from \"./usersReducer\";\r\nimport {AppThunkType} from \"./Redux-store\";\r\nimport {InfoFormType} from \"../components/profile/profileInfo/ProfileInfoForm\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst ADD_NEW_POST = 'SOCIAL-NETWORK/PROFILE/ADD-NEW-POST'\r\nconst SET_USER_PROFILE = 'SOCIAL-NETWORK/PROFILE/SET_USER_PROFILE'\r\nconst SET_STATUS = 'SOCIAL-NETWORK/PROFILE/SET_STATUS'\r\nconst SAVE_PHOTO = 'SOCIAL-NETWORK/PROFILE/SAVE_PHOTO'\r\nconst TOGGLE_EDIT_FORM = 'SOCIAL-NETWORK/PROFILE/TOGGLE_EDIT_FORM'\r\n\r\nexport type ProfileActionsType =\r\n    | AddPostActionType\r\n    | SetUserProfileActionType\r\n    | GetStatusActionType\r\n    | SavePhotoActionType\r\n    | editModeFormType\r\n\r\ntype AddPostActionType = ReturnType<typeof addPost>                     // лучше типизировать так\r\ntype SetUserProfileActionType = ReturnType<typeof setUserProfile>\r\ntype GetStatusActionType = ReturnType<typeof setStatus>\r\ntype SavePhotoActionType = ReturnType<typeof savePhoto>\r\ntype editModeFormType = ReturnType<typeof toggleEditForm>\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n}\r\nexport type UserProfileType = {\r\n    aboutMe: string\r\n    userId: number | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n}\r\nexport type ContactsType = {\r\n    [key: string]: string\r\n}\r\ntype PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: v1(), message: 'Hi, my friends!', likes: 10},\r\n        {id: v1(), message: 'yo, yo', likes: 5},\r\n        {id: v1(), message: 'ya-hu-how!', likes: 7}\r\n    ] as Array<PostType>,\r\n    userProfile: null as UserProfileType | null,\r\n    editForm: false,\r\n    status: ''\r\n}\r\n\r\nexport type ProfilePageType = typeof initialState\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ProfileActionsType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_POST:\r\n            let newPost = {\r\n                id: v1(),\r\n                message: action.newMessagePost,\r\n                likes: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                userProfile: action.userProfile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        case SAVE_PHOTO:\r\n            return {\r\n                ...state,\r\n                userProfile: {...state.userProfile, photos: action.photos} as UserProfileType\r\n            }\r\n        case TOGGLE_EDIT_FORM:\r\n            return {\r\n                ...state,\r\n                editForm: action.edit\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n///////////////////////////////////////////////// action creators //////////////////////////////\r\n\r\nexport const addPost = (newMessagePost: string) => {\r\n    return {type: ADD_NEW_POST, newMessagePost: newMessagePost} as const\r\n}\r\nexport const setUserProfile = (userProfile: UserProfileType) => {\r\n    return {type: SET_USER_PROFILE, userProfile: userProfile} as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {type: SET_STATUS, status: status} as const\r\n}\r\nexport const savePhoto = (photos: PhotosType) => {\r\n    return {type: SAVE_PHOTO, photos: photos} as const\r\n}\r\nexport const toggleEditForm = (edit: boolean) => {\r\n    return {type: TOGGLE_EDIT_FORM, edit: edit} as const\r\n}\r\n\r\n//////////////////////////////////////////////////// THUNK //////////////////////////////////////\r\n\r\nexport const getProfile = (userId: number | null): AppThunkType => async dispatch => {\r\n    dispatch(toggleLoading(true))\r\n    const res = await profileApi.getProfile(userId)\r\n\r\n    dispatch(toggleLoading(false))\r\n    dispatch(setUserProfile(res.data))\r\n}\r\n\r\nexport const getStatus = (userId: number | null): AppThunkType => async dispatch => {\r\n\r\n    dispatch(toggleLoading(true))\r\n    const res = await profileApi.getStatus(userId)\r\n\r\n    dispatch(toggleLoading(false))\r\n    dispatch(setStatus(res.data))\r\n\r\n}\r\n\r\nexport const updateStatus = (status: string): AppThunkType => async dispatch => {\r\n    try {\r\n        const res = await profileApi.updateStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    } catch (error) {\r\n        debugger\r\n    }\r\n}\r\n\r\nexport const photoUpload = (Photofile: any): AppThunkType => async dispatch => {\r\n    const res = await profileApi.updatePhoto(Photofile)\r\n\r\n    if (res.data.resultCode === 0)\r\n        dispatch(savePhoto(res.data.data.photos))\r\n}\r\n\r\nexport const saveProfileInfo = (formData: InfoFormType): AppThunkType => async (dispatch, getState) => {\r\n    const myId = getState().auth.id\r\n    const res = await profileApi.saveProfileInfo(formData)\r\n\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(getProfile(myId))\r\n        dispatch(toggleEditForm(false))\r\n\r\n    } else {\r\n        const errorMessage = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error!'\r\n        dispatch(stopSubmit('edit-info', {_error: errorMessage}))\r\n    }\r\n}","import {v1} from \"uuid\";\r\n\r\nconst CHANGE_SHOW_FRIENDS = 'SOCIAL-NETWORK/SIDEBAR/CHANGE-SHOW-FRIENDS'\r\n\r\nexport type SidebarActionsType = ChangeShowFriendsActionType\r\ntype ChangeShowFriendsActionType = ReturnType<typeof changeShowFriends>\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n    showFriends: boolean\r\n}\r\ntype FriendsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nconst initialState: SidebarType = {\r\n    friends: [\r\n        {id: v1(), name: 'Alena'},\r\n        {id: v1(), name: 'Dima'},\r\n        {id: v1(), name: 'Kolya'},\r\n        {id: v1(), name: 'Usik'}\r\n    ],\r\n    showFriends: true\r\n}\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: SidebarActionsType): SidebarType => {\r\n    switch (action.type) {\r\n        case CHANGE_SHOW_FRIENDS:\r\n            return {\r\n                ...state,\r\n                showFriends: !state.showFriends\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const changeShowFriends = () => {\r\n    return {type: CHANGE_SHOW_FRIENDS} as const\r\n}","import {authApi, securityApi} from \"../api/api\";\r\nimport {AppThunkType} from \"./Redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_AUTH_DATA = 'SOCIAL-NETWORK/AUTH/SET_AUTH_DATA'\r\nconst SET_CAPTCHA_URL = 'SOCIAL-NETWORK/AUTH/SET_CAPTCHA_URL'\r\n\r\nexport type AuthActionType = SetAuthActionType | SetCaptchaUrlType\r\ntype SetAuthActionType = ReturnType<typeof setAuthData>\r\ntype SetCaptchaUrlType = ReturnType<typeof setCaptchaUrl>\r\n\r\nexport type AuthType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nexport const authReducer = (state: AuthType = initialState, action: AuthActionType): AuthType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_DATA:\r\n        case SET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////////////// action creators ///////////////////////////////\r\n\r\nexport const setAuthData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {type: SET_AUTH_DATA, payload: {id, email, login, isAuth: isAuth}} as const\r\n}\r\nexport const setCaptchaUrl = (captchaUrl: string | null) => {\r\n    return {type: SET_CAPTCHA_URL, payload: {captchaUrl}} as const\r\n}\r\n\r\n//////////////////////////////////////////////////// THUNK //////////////////////////////////////////\r\n\r\nexport const getAuthMe = (): AppThunkType => async dispatch => {\r\n\r\n    const res = await authApi.authMe()\r\n    if (res.data.resultCode === 0) {\r\n        const {id, email, login} = res.data.data\r\n        dispatch(setAuthData(id, email, login, true))\r\n    }\r\n    return res\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): AppThunkType => async dispatch => {\r\n\r\n    const res = await authApi.login(email, password, rememberMe, captcha)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(getAuthMe())\r\n    } else {\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptcha())\r\n        }\r\n        const errorMessage = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error!'\r\n        dispatch(stopSubmit('login', {_error: errorMessage}))\r\n    }\r\n}\r\n\r\nexport const logout = (): AppThunkType => async dispatch => {\r\n\r\n    const res = await authApi.logout()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setAuthData(null, null, null, false))\r\n        dispatch(setCaptchaUrl(null))\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): AppThunkType => async dispatch => {\r\n    const res = await securityApi.getCaptchaUrl()\r\n    dispatch(setCaptchaUrl(res.data.url))\r\n}\r\n","import {AppThunkType} from \"./Redux-store\";\r\nimport {getAuthMe} from \"./authReducer\";\r\n\r\nconst SET_INITIALIZATION = 'SOCIAL-NETWORK/APP/SET_INITIALIZATION'\r\n\r\nexport type AppCommonActionType = SetInitializationActionType\r\ntype SetInitializationActionType = ReturnType<typeof setInitialization>\r\nexport type AppCommonType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState: AppCommonType = {\r\n    initialized: false\r\n}\r\n\r\nexport const AppReducer = (state: AppCommonType = initialState, action: AppCommonActionType): AppCommonType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZATION:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////////////// action creators ///////////////////////////////\r\n\r\nexport const setInitialization = () => {\r\n    return {type: SET_INITIALIZATION} as const\r\n}\r\n\r\n//////////////////////////////////////////////////// THUNK //////////////////////////////////////////\r\n\r\nexport const initializeApp = (): AppThunkType => dispatch => {\r\n\r\n    const promise = dispatch(getAuthMe())\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(setInitialization())\r\n        })\r\n}\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ProfileActionsType, profileReducer} from \"./profilePageReducer\";\r\nimport {DialogPageActionsType, dialogReducer} from \"./dialogPageReducer\";\r\nimport {SidebarActionsType, sidebarReducer} from \"./sidebarReducer\";\r\nimport {UsersActionsType, usersReducer} from \"./usersReducer\";\r\nimport {AuthActionType, authReducer} from \"./authReducer\";\r\nimport {AppCommonActionType, AppReducer} from \"./AppReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: AppReducer,\r\n    form: formReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType =\r\n    | AuthActionType\r\n    | DialogPageActionsType\r\n    | ProfileActionsType\r\n    | SidebarActionsType\r\n    | UsersActionsType\r\n    | AppCommonActionType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\n","export const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}","export const News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}","export const Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}","import {changeShowFriends, SidebarType} from \"../../redux/sidebarReducer\";\r\nimport {Navbar} from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\n\r\nexport type NavbarPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    sidebar: SidebarType\r\n}\r\ntype MapDispatchPropsType = {\r\n    changeShowFriends: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\n\r\nexport const NavbarContainer = connect(mapStateToProps, {changeShowFriends}) (Navbar)","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\"\r\nimport {Button} from \"../common/buttons/Button\";\r\nimport {NavbarPropsType} from \"./NavbarContainer\";\r\n\r\nexport const Navbar: React.FC<NavbarPropsType> = (props) => {\r\n    const {\r\n        changeShowFriends,\r\n        sidebar\r\n    } = props\r\n\r\n    const friends = sidebar.friends.map((u) => <div key={u.id}>friend</div>/*<user key={u.id} id={u.id} name={u.name}/>*/)\r\n\r\n    return (\r\n        <nav className={s.navbar}>\r\n            <div className={s.navbarItems}>\r\n                <div className={s.item}>\r\n                    <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/dialogs' activeClassName={s.active}>Message</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/news' activeClassName={s.active}>News</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/music' activeClassName={s.active}>Music</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/settings' activeClassName={s.active}>Settings</NavLink>\r\n                </div>\r\n            </div>\r\n\r\n            <h3>Friends</h3>\r\n            <div className={s.listFriends}>\r\n                <div className={s.friends}>\r\n                    {sidebar.showFriends && friends}\r\n                </div>\r\n                {sidebar.showFriends ? <Button onClickHandler={changeShowFriends} buttonName={'hide friends'}/> :\r\n                    <Button onClickHandler={changeShowFriends} buttonName={'show friends'}/>}\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>('')\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {props.status ? props.status : 'What is new?'}\r\n                    </span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                />\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import {UserProfileType} from \"../../../redux/profilePageReducer\";\r\nimport React from \"react\";\r\nimport {Input, Textarea} from \"../../common/form-elements/FormElements\";\r\nimport {maxLength100, required} from \"../../../utils/validators/validators\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Button} from \"../../common/buttons/Button\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\nexport type InfoFormType = {\r\n    userProfile: UserProfileType | null\r\n}\r\ntype OwnPropsType = {\r\n    userProfile: UserProfileType | null\r\n}\r\n\r\nconst ProfileInfoForm: React.FC<InjectedFormProps<InfoFormType, OwnPropsType> & OwnPropsType> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.info_form}>\r\n            {props.error && <div className={s.error}>{props.error}</div>}\r\n            <div>\r\n                <u>\"Full name\" :</u><Field placeholder={'enter text...'}\r\n                                           name={'fullName'}\r\n                                           component={Input}\r\n            />\r\n            </div>\r\n            <div>\r\n                <u>\"AboutMe\" :</u><Field placeholder={'enter text...'}\r\n                                         name={'aboutMe'}\r\n                                         component={Textarea}\r\n            />\r\n            </div>\r\n            <div>\r\n                <u>\"LookingForAJob\" :</u><Field name={'lookingForAJob'}\r\n                                                component={Input}\r\n                                                type={'checkbox'}\r\n            />\r\n            </div>\r\n            <div>\r\n                <u>\"LookingForAJobDescription\" :</u><Field placeholder={'enter text...'}\r\n                                                           name={'lookingForAJobDescription'}\r\n                                                           component={Textarea}\r\n            />\r\n            </div>\r\n            <div>\r\n                <u>Contacts : </u>\r\n                {props.userProfile && Object.keys(props.userProfile.contacts).map((key) => {\r\n                    return <div key={key}>\r\n                        <u> {key} :</u><Field placeholder={'enter text...'}\r\n                                              name={'contacts.' + key}\r\n                                              component={Input}\r\n                    />\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div style={{'marginTop': '20px'}}>\r\n                <Button buttonName={'Save info'}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm<InfoFormType, OwnPropsType>({\r\n    form: 'edit-info'  // уникальное имя для формы\r\n})(ProfileInfoForm)","import {UserProfileType} from \"../../../redux/profilePageReducer\";\r\nimport React, {FC} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Button} from \"../../common/buttons/Button\";\r\n\r\ntype InfoType = {\r\n    userProfile: UserProfileType | null\r\n    isOwner: boolean\r\n    onEditMode: () => void\r\n}\r\n\r\nexport const Info: FC<InfoType> = (props) => {\r\n    const {userProfile, isOwner, onEditMode} = props\r\n\r\n    return (\r\n        <div className={s.info}>\r\n            <div>\r\n                <u>\"Full name\" :</u>\r\n                {userProfile?.fullName ? userProfile.fullName : 'not indicated'}</div>\r\n            <div>\r\n                <u>\"About me\" :</u>\r\n                {userProfile?.aboutMe ? userProfile.aboutMe : 'not indicated'}</div>\r\n            <div>\r\n                <u>\"Loking for a job\" :</u>\r\n                {userProfile?.lookingForAJob ? 'yes' : 'no'}</div>\r\n            <div>\r\n                <u>\"My professional skills\" :</u>\r\n                {userProfile?.lookingForAJobDescription ? userProfile.lookingForAJobDescription : 'not indicated'}\r\n            </div>\r\n            {isOwner && <div><Button onClickHandler={onEditMode} buttonName={'Edit information'}/></div>}\r\n            <div>\r\n                <u>Contacts : </u>\r\n                {userProfile && Object.keys(userProfile.contacts).map((key) => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={userProfile.contacts[key]}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsType> = React.memo((props) => {\r\n    const {\r\n        contactTitle,\r\n        contactValue,\r\n    } = props\r\n\r\n    return (\r\n        <div style={{'paddingLeft': '20px'}}>\r\n            <span>\"{contactTitle}\" :</span>\r\n            {contactValue ? contactValue : 'not indicated'}\r\n        </div>\r\n    )\r\n})\r\n","import s from './ProfileInfo.module.css';\r\nimport React, {ChangeEvent, FC} from \"react\";\r\nimport {UserProfileType} from \"../../../redux/profilePageReducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport ava from '../../../assets/images/Avaimg.png'\r\nimport ProfileInfoForm, {InfoFormType} from \"./ProfileInfoForm\";\r\nimport {Info} from \"./Info\";\r\n\r\ntype PropsType = {\r\n    userProfile: UserProfileType | null\r\n    loading: boolean\r\n    isOwner: boolean\r\n    status: string | ''\r\n    updateStatus: (status: string) => void\r\n    photoUpload: (PhotoFile: any) => void\r\n    saveProfileInfo: (formData: InfoFormType) => void\r\n    toggleEditForm: (edit: boolean) => void\r\n    editForm: boolean\r\n}\r\n\r\nexport const ProfileInfo: FC<PropsType> = (props) => {\r\n    const {\r\n        userProfile,\r\n        loading,\r\n        isOwner,\r\n        status,\r\n        updateStatus,\r\n        photoUpload,\r\n        saveProfileInfo,\r\n        editForm,\r\n        toggleEditForm\r\n    } = props\r\n\r\n    const photoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.target.files && photoUpload(e.target.files[0])\r\n    }\r\n    const onSubmit = (formData: InfoFormType) => {\r\n        saveProfileInfo(formData)\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfoBlock}>\r\n            <div>\r\n                {!loading && userProfile ?\r\n                    <img alt={''}\r\n                         style={{width: '300px', height: '300px'}}\r\n                         src={userProfile.photos.large ? userProfile.photos.large : ava}/> :\r\n                    <Preloader/>\r\n                }\r\n                <div>\r\n                    {isOwner && <input type={'file'} onChange={photoSelected}/>}\r\n                </div>\r\n                <div className={s.status}>\r\n                    <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n            </div>\r\n            {editForm ?\r\n                <ProfileInfoForm userProfile={userProfile} onSubmit={onSubmit}/> :\r\n                <Info userProfile={userProfile} isOwner={isOwner} onEditMode={() => {\r\n                    toggleEditForm(true)\r\n                }}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport ava from './../../../../assets/images/Avaimg.png'\r\nimport s from \"./Post.module.css\"\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likes: number\r\n    profilePhoto?: string | null\r\n}\r\n\r\nexport const Post: React.FC<PropsType> = (props) => {\r\n    const {\r\n        message,\r\n        likes,\r\n        profilePhoto\r\n    } = props\r\n\r\n    return (\r\n        <div className={s.post_item}>\r\n            <img alt={''} src={profilePhoto ? profilePhoto : ava}/>\r\n            <span className={s.post}>\r\n                {message}\r\n            </span>\r\n            <span className={s.like}>\r\n                likes: {likes}\r\n            </span>\r\n        </div>\r\n    )\r\n}","import s from \"./MyPosts.module.css\";\r\nimport React from \"react\";\r\nimport {Post} from \"./post/Post\";\r\nimport {PostType} from \"../../../redux/profilePageReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Button} from \"../../common/buttons/Button\";\r\nimport {Textarea} from \"../../common/form-elements/FormElements\";\r\nimport {maxLength10, required} from \"../../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newMessagePost: string) => void\r\n    profilePhoto?: string | null\r\n}\r\n\r\nexport const MyPosts: React.FC<PropsType> = React.memo((props) => {\r\n    const {\r\n        addPost,\r\n        posts,\r\n        profilePhoto,\r\n    } = props\r\n\r\n    const postsElement = [...posts].reverse().map((p) =>\r\n        <Post\r\n        key={p.id}\r\n        message={p.message}\r\n        likes={p.likes}\r\n        profilePhoto={profilePhoto}\r\n        />)\r\n\r\n    const AddNewPost = (formData: FormPostDataType) => {\r\n        addPost(formData.newPost)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className={s.heading}>-- My posts --</h3>\r\n            <div className={s.add_post}>\r\n                <AddPostReduxForm onSubmit={AddNewPost}/>\r\n            </div>\r\n            <div className={s.post}>\r\n\r\n                {postsElement}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport type FormPostDataType = {\r\n    newPost: string\r\n}\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormPostDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <div>\r\n                <Field placeholder={'enter your post'}\r\n                       name={'newPost'}\r\n                       component={Textarea}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n                <Button buttonName={'add post'}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<FormPostDataType>({\r\n    form: 'MyPostForm'  // уникальное имя для формы\r\n})(AddPostForm)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\nimport {\r\n    addPost,\r\n    getProfile,\r\n    getStatus, photoUpload,\r\n    PostType, saveProfileInfo,\r\n    updateStatus,\r\n    UserProfileType, toggleEditForm\r\n} from \"../../redux/profilePageReducer\";\r\nimport s from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {MyPosts} from \"./my-posts/MyPosts\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {InfoFormType} from \"./profileInfo/ProfileInfoForm\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n    userProfile: UserProfileType | null\r\n    loading: boolean\r\n    isAuth: boolean\r\n    myId: number | null\r\n    status: string | ''\r\n    profilePhoto?: string | null\r\n    editForm: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newMessagePost: string) => void\r\n    getProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    photoUpload: (Photofile: any) => void\r\n    saveProfileInfo: (formData: InfoFormType) => void\r\n    toggleEditForm: (edit: boolean) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\n\r\ntype ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    changeProfile() {\r\n        let userId = Number(this.props.match.params.userId)     //<==== get the id from the browser line using (withRouter)\r\n        if (!userId) {\r\n           userId = this.props.myId as number\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.changeProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.changeProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.content}>\r\n                <ProfileInfo\r\n                    userProfile={this.props.userProfile}\r\n                    loading={this.props.loading}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    photoUpload={this.props.photoUpload}\r\n                    saveProfileInfo={this.props.saveProfileInfo}\r\n                    editForm={this.props.editForm}\r\n                    toggleEditForm={this.props.toggleEditForm}\r\n                />\r\n                <MyPosts\r\n                    posts={this.props.posts}\r\n                    addPost={this.props.addPost}\r\n                    profilePhoto={this.props.profilePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        userProfile: state.profilePage.userProfile,\r\n        loading: state.usersPage.loading,\r\n        isAuth: state.auth.isAuth,\r\n        myId: state.auth.id,\r\n        status: state.profilePage.status,\r\n        profilePhoto: state.profilePage.userProfile?.photos?.large,\r\n        editForm: state.profilePage.editForm\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addPost, getProfile, getStatus, updateStatus, photoUpload, saveProfileInfo, toggleEditForm}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n","import React from \"react\"\r\nimport s from \"./Header.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button} from \"../common/buttons/Button\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nexport const Header = (props: PropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.login}>\r\n                {props.isAuth ?\r\n                    <div> {props.login} <Button onClickHandler={props.logout} buttonName={'LogOut'}/> </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\nimport {Header} from \"./Header\";\r\nimport {logout} from \"../../redux/authReducer\";\r\n\r\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nexport class HeaderApiContainer extends React.Component<HeaderPropsType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header\r\n                isAuth={this.props.isAuth}\r\n                login={this.props.login}\r\n                logout={this.props.logout}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport const HeaderContainer = connect(mapStateToProps, {logout}) (HeaderApiContainer)\r\n\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/form-elements/FormElements\";\r\nimport {maxLength100, required} from \"../../utils/validators/validators\";\r\nimport s from \"./Login.module.css\";\r\nimport {Button} from \"../common/buttons/Button\";\r\nimport {FormType} from \"./Login\";\r\n\r\ntype OwnPropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormType, OwnPropsType> & OwnPropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'email'}\r\n                       name={'email'}\r\n                       component={Input}\r\n                       validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'password'}\r\n                       name={'password'}\r\n                       component={Input}\r\n                       validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'rememberMe'}\r\n                       type={'checkbox'}\r\n                /> remember me\r\n            </div>\r\n            {props.captchaUrl && <img src={props.captchaUrl}/>}\r\n            {props.captchaUrl &&\r\n            <div>\r\n                <Field placeholder={'enter symbols from image'}\r\n                       component={Input}\r\n                       name={'captcha'}\r\n                />\r\n            </div>}\r\n            {props.error && <div className={s.error}>{props.error}</div>}\r\n            <div>\r\n                <Button buttonName={'Login'}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<FormType, OwnPropsType>({\r\n    form: 'login'  // уникальное имя для формы\r\n})(LoginForm)","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\nexport type FormType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType>= (props) => {\r\n\r\n    const {login, isAuth, captchaUrl} = props\r\n\r\n    const onSubmit = (formData: FormType) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if(isAuth) {\r\n       return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginForm captchaUrl={captchaUrl} onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\nexport default connect(mapStateToProps, {login})(Login)\r\n","import React, {Suspense} from 'react';\nimport './App.css';\nimport {Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {Settings} from \"./components/settings/Settings\";\nimport {News} from \"./components/news/News\";\nimport {Music} from \"./components/music/Music\";\nimport {NavbarContainer} from \"./components/navbar/NavbarContainer\";\nimport ProfileContainer from \"./components/profile/ProfileContainer\";\nimport {HeaderContainer} from \"./components/header/HeaderContainer\";\nimport Login from \"./components/login/Login\";\nimport {connect} from \"react-redux\";\nimport {compose} from 'redux';\nimport {initializeApp} from \"./redux/AppReducer\";\nimport {AppRootStateType} from \"./redux/Redux-store\";\nimport {Preloader} from \"./components/common/preloader/Preloader\";\n\nconst Dialogs = React.lazy(() => import('./components/dialogs/DialogsContainer'))\nconst UsersContainer = React.lazy(() => import('./components/users/UsersContainer'))\n\ntype PropsType = {\n    initializeApp: () => void\n    initialized: boolean\n}\ntype MapStateToPropsType = {\n    initialized: boolean\n}\n\nclass App extends React.Component<PropsType> {\n\n    componentDidMount(): void {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <NavbarContainer/>\n                <div className={'app-wrapper-content'}>\n                    <Switch>\n                        <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                        <Route path='/dialogs' render={() => {\n                            return <Suspense fallback={<Preloader/>}>\n                                <Dialogs/>\n                            </Suspense>\n                        }}/>\n                        <Route path='/users' render={() => {\n                            return <Suspense fallback={<Preloader/>}>\n                                <UsersContainer/>\n                            </Suspense>\n                        }}/>\n                        <Route path='/music' render={() => <Music/>}/>\n                        <Route path='/news' render={() => <News/>}/>\n                        <Route path='/settings' render={() => <Settings/>}/>\n                        <Route path='/login' render={() => <Login/>}/>\n                        <Route path='/social-network' render={() => <Redirect to={'/profile'}/>}/>\n                        <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\n                        <Route path='*' render={() => <div>404 NOT FOUND</div>}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {initializeApp}),\n    withRouter)(App)\n\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/Redux-store'\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n)\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__3suiF\",\"status\":\"ProfileInfo_status__1Nxje\",\"info\":\"ProfileInfo_info__2iS-I\",\"info_form\":\"ProfileInfo_info_form__OI2OF\",\"error\":\"ProfileInfo_error__1E0S-\"};","export const required = (value: number | string) => {\r\n    if (value) return undefined\r\n    return 'Field is required to enter!'\r\n}\r\n\r\nconst maxLengthValid = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols!`\r\n    }else{\r\n        return undefined\r\n    }\r\n}\r\nexport const maxLength10 = maxLengthValid(10)\r\nexport const maxLength100 = maxLengthValid(100)\r\n\r\n\r\n","import {usersApi} from \"../api/api\";\r\nimport {AppThunkType} from \"./Redux-store\";\r\nimport {Dispatch} from \"react\";\r\n\r\nconst UNFOLLOW = 'SOCIAL-NETWORK/USERS/UNFOLLOW'\r\nconst FOLLOW = 'SOCIAL-NETWORK/USERS/FOLLOW'\r\nconst SET_USERS = 'SOCIAL-NETWORK/USERS/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SOCIAL-NETWORK/USERS/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_COUNT = 'SOCIAL-NETWORK/USERS/SET_TOTAL_COUNT'\r\nconst TOGGLE_LOADING = 'SOCIAL-NETWORK/USERS/TOGGLE_LOADING'\r\nconst TOGGLE_FOLLOWING_PROGRESS = 'SOCIAL-NETWORK/USERS/TOGGLE_FOLLOWING_PROGRESS'\r\n\r\nexport type UsersActionsType =\r\n    | UnfollowActionType\r\n    | FollowActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalCountActionType\r\n    | ToggleLoadingActionType\r\n    | ToggleFollowingProgressActionType\r\n\r\ntype UnfollowActionType = ReturnType<typeof successedUnfollow>\r\ntype FollowActionType = ReturnType<typeof successedFollow>\r\ntype SetUsersActionType = ReturnType<typeof setUsers>\r\ntype SetCurrentPageActionType = ReturnType<typeof setCurrentPage>\r\ntype SetTotalCountActionType = ReturnType<typeof setTotalCount>\r\ntype ToggleLoadingActionType = ReturnType<typeof toggleLoading>\r\ntype ToggleFollowingProgressActionType = ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UserType>\r\n    count: number\r\n    totalCount: number\r\n    currentPage: number\r\n    loading: boolean\r\n    followingProgress: Array<number>\r\n}\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n    status: string\r\n}\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nconst initialState: UsersPageType = {\r\n    users: [],\r\n    count: 50,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    loading: false,\r\n    followingProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: UsersActionsType): UsersPageType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        case TOGGLE_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingProgress: action.isLoading\r\n                    ? [...state.followingProgress, action.userId]\r\n                    : state.followingProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n////////////////////////////////////////////// action creators ///////////////////////////////\r\n\r\nexport const successedFollow = (userId: number) => {\r\n    return {type: FOLLOW, userId: userId} as const\r\n}\r\nexport const successedUnfollow = (userId: number) => {\r\n    return {type: UNFOLLOW, userId: userId} as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {type: SET_USERS, users: users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: SET_CURRENT_PAGE, currentPage: currentPage} as const\r\n}\r\nexport const setTotalCount = (totalCount: number) => {\r\n    return {type: SET_TOTAL_COUNT, totalCount: totalCount} as const\r\n}\r\nexport const toggleLoading = (loading: boolean) => {\r\n    return {type: TOGGLE_LOADING, loading: loading} as const\r\n}\r\nexport const toggleFollowingProgress = (isLoading: boolean, userId: number) => {\r\n    return {type: TOGGLE_FOLLOWING_PROGRESS, isLoading: isLoading, userId: userId} as const\r\n}\r\n\r\n//////////////////////////////////////////// THUNK ////////////////////////////////////////////////////////////////\r\n\r\nexport const requestUsers = (currentPage: number, count: number): AppThunkType => async dispatch => {\r\n    dispatch(setCurrentPage(currentPage))\r\n    dispatch(toggleLoading(true))\r\n    const res = await usersApi.getUsers(currentPage, count)\r\n    dispatch(toggleLoading(false))\r\n    dispatch(setUsers(res.data.items))\r\n    dispatch(setTotalCount(res.data.totalCount))\r\n}\r\n\r\nexport const follow = (userId: number): AppThunkType => async dispatch => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    const res = await usersApi.follow(userId)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(successedFollow(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n\r\n    /*followUnfollowFlow(dispatch, userId, usersApi.follow(userId), successedFollow)*/\r\n}\r\n\r\nexport const unfollow = (userId: number): AppThunkType => async dispatch => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    const res = await usersApi.unfollow(userId)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(successedUnfollow(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n\r\n  /*  followUnfollowFlow(dispatch, userId, usersApi.unfollow(userId), successedUnfollow)*/\r\n}\r\n\r\n/*\r\nconst followUnfollowFlow = async (dispatch: Dispatch<UsersActionsType>,                 //// Helper function\r\n                                  userId: number | null, apiMethod: any,\r\n                                  actionCreator: (userId: number | null) => FollowActionType | UnfollowActionType) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    const res = await apiMethod(userId)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n*/\r\n","export default __webpack_public_path__ + \"static/media/preloader.d3fbaf2b.gif\";","import preloader from \"../../../assets/images/preloader.gif\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img alt={'there should be '} src={preloader}/>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formElement\":\"FormElements_formElement__2tkD1\",\"error\":\"FormElements_error__gdMqo\"};","export default __webpack_public_path__ + \"static/media/Avaimg.4e89b174.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"MyPosts_heading__3mMuh\",\"add_post\":\"MyPosts_add_post__2UtlE\",\"post\":\"MyPosts_post__ROcyD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_item\":\"Post_post_item__21zv8\",\"like\":\"Post_like__1Fhs5\",\"post\":\"Post_post__1Uo7o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__2ant2\",\"active\":\"Buttons_active__1jy1t\"};"],"sourceRoot":""}