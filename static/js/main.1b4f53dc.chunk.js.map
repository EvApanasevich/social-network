{"version":3,"sources":["components/header/Header.module.css","redux/dialogPageReducer.ts","components/navbar/Navbar.module.css","hok/withAuthRedirect.tsx","components/profile/profileInfo/ProfileInfo.module.css","components/login/Login.module.css","api/api.ts","components/common/buttons/Button.tsx","reportWebVitals.ts","redux/profilePageReducer.ts","redux/sidebarReducer.ts","redux/authReducer.ts","redux/AppReducer.ts","redux/Redux-store.ts","components/settings/Settings.tsx","components/news/News.tsx","components/music/Music.tsx","components/navbar/NavbarContainer.tsx","components/navbar/Navbar.tsx","components/profile/profileInfo/ProfileStatus.tsx","components/profile/profileInfo/ProfileInfo.tsx","components/profile/my-posts/post/Post.tsx","components/profile/my-posts/MyPosts.tsx","components/profile/ProfileContainer.tsx","components/header/Header.tsx","components/header/HeaderContainer.tsx","components/login/Login.tsx","App.tsx","index.tsx","utils/validators/validators.ts","redux/usersReducer.ts","components/common/form-elements/FormElements.tsx","assets/images/preloader.gif","components/common/preloader/Preloader.tsx","components/common/form-elements/FormElements.module.css","assets/images/Avaimg.png","components/profile/my-posts/MyPosts.module.css","components/profile/my-posts/post/Post.module.css","components/common/buttons/Buttons.module.css"],"names":["module","exports","ADD_NEW_MESSAGE","initialState","dialogs","id","v1","name","messages","message","dialogReducer","state","action","type","newMessage","sendMessage","mapStateToProps","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","instance","axios","create","baseURL","withCredentials","headers","usersApi","getUsers","currentPage","count","get","follow","userId","post","unfollow","delete","profileApi","getProfile","getStatus","updateStatus","status","put","authApi","authMe","login","email","password","rememberMe","logout","Button","onClickHandler","buttonName","useState","style","setStyle","onMouseEnter","event","onMouseLeave","className","s","active","button","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_NEW_POST","SET_USER_PROFILE","SET_STATUS","posts","likes","userProfile","setStatus","CHANGE_SHOW_FRIENDS","friends","showFriends","SET_AUTH_DATA","undefined","setAuthData","payload","getAuthMe","dispatch","a","res","data","resultCode","SET_INITIALIZATION","initialized","rootReducer","combineReducers","profilePage","newPost","newMessagePost","dialogPage","sidebar","usersPage","usersReducer","app","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","Settings","News","Music","NavbarContainer","changeShowFriends","map","u","navbar","navbarItems","item","activeClassName","listFriends","ProfileStatus","editMode","setEditMode","useEffect","marginLeft","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","ProfileInfo","info","loading","alt","width","height","src","photos","large","ava","Preloader","Post","post_item","like","MyPosts","React","memo","console","log","addPost","postsElement","reverse","p","heading","add_post","AddPostReduxForm","onSubmit","formData","reduxForm","handleSubmit","Field","placeholder","component","Textarea","validate","required","maxLength10","ProfileContainer","this","match","params","myId","content","compose","toggleLoading","withRouter","Header","header","HeaderApiContainer","HeaderContainer","LoginReduxForm","Input","maxLength100","error","errorMessage","length","stopSubmit","_error","Dialogs","lazy","UsersContainer","App","initializeApp","exact","path","render","fallback","promise","Promise","all","ReactDOM","document","getElementById","maxLengthValid","maxLength","UNFOLLOW","FOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_LOADING","TOGGLE_FOLLOWING_PROGRESS","users","totalCount","followingProgress","followed","isLoading","filter","successedFollow","successedUnfollow","setCurrentPage","toggleFollowingProgress","requestUsers","items","followUnfollowFlow","apiMethod","actionCreator","input","meta","hasError","touched","formElement","preloader"],"mappings":"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","file":"static/js/main.1b4f53dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header___SfV1\",\"login\":\"Header_login__3bWw6\"};","import {v1} from \"uuid\";\r\n\r\nconst ADD_NEW_MESSAGE = 'SOCIAL-NETWORK/DIALOG/ADD-NEW-MESSAGE'\r\n\r\nexport type DialogPageActionsType = AddMessageActionType\r\n\r\ntype AddMessageActionType = ReturnType<typeof sendMessage>\r\n\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nlet initialState: DialogPageType = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Alena'},\r\n        {id: v1(), name: 'Dima'},\r\n    ],\r\n    messages: [\r\n        {id: v1(), message: 'hello!'},\r\n    ],\r\n}\r\n\r\nexport const dialogReducer = (state: DialogPageType = initialState, action: DialogPageActionsType): DialogPageType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_MESSAGE:\r\n            let newMessage = {\r\n                id: v1(),\r\n                message: action.newMessage,\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const sendMessage = (newMessage: string) => {\r\n    return {type: ADD_NEW_MESSAGE, newMessage: newMessage} as const\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__3JtJA\",\"navbarItems\":\"Navbar_navbarItems__3IyF9\",\"item\":\"Navbar_item__3px6H\",\"active\":\"Navbar_active__2GpVG\",\"friends\":\"Navbar_friends__2MIms\",\"listFriends\":\"Navbar_listFriends__2UX4P\"};","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/Redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    const RedirectedComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return RedirectedComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ProfileInfo_info__2iS-I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__26nHC\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '014b2435-f016-4562-8e2a-2ddffeb71f2a'\r\n    }\r\n})\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number, count: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${count}`)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: string | undefined) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status', {status: status})\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n    authMe() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\n","import React, {MouseEvent, useState} from \"react\";\r\nimport s from './Buttons.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    onClickHandler?: () => void\r\n    buttonName?: string\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    const {\r\n        onClickHandler,\r\n        buttonName,\r\n    } = props\r\n\r\n    const [style, setStyle] = useState<boolean>(false)\r\n    const setClass = (event: MouseEvent<HTMLButtonElement>) => {\r\n        setStyle(true)\r\n    }\r\n    const delClass = (event: MouseEvent<HTMLButtonElement>) => {\r\n        setStyle(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                onMouseEnter={setClass}\r\n                onMouseLeave={delClass}\r\n                className={style ? s.active : s.button}\r\n                onClick={onClickHandler}\r\n            >\r\n                {buttonName}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {v1} from \"uuid\";\r\nimport {profileApi} from \"../api/api\";\r\nimport {toggleLoading} from \"./usersReducer\";\r\nimport {AppThunkType} from \"./Redux-store\";\r\n\r\nconst ADD_NEW_POST = 'SOCIAL-NETWORK/PROFILE/ADD-NEW-POST'\r\nconst SET_USER_PROFILE = 'SOCIAL-NETWORK/PROFILE/SET_USER_PROFILE'\r\nconst SET_STATUS = 'SOCIAL-NETWORK/PROFILE/SET_STATUS'\r\n\r\nexport type ProfileActionsType =\r\n    | AddPostActionType\r\n    | SetUserProfileActionType\r\n    | GetStatusActionType\r\n\r\ntype AddPostActionType = ReturnType<typeof addPost>                     // лучше типизировать так\r\ntype SetUserProfileActionType = ReturnType<typeof setUserProfile>\r\ntype GetStatusActionType = ReturnType<typeof setStatus>\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    userProfile: UserProfileType | null\r\n    status: string | ''\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n}\r\nexport type UserProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n}\r\ntype ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: v1(), message: 'Hi, my friends!', likes: 10},\r\n        {id: v1(), message: 'yo, yo', likes: 5},\r\n        {id: v1(), message: 'ya-hu-how!', likes: 7}\r\n    ],\r\n    userProfile: null,\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ProfileActionsType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_POST:\r\n            let newPost = {\r\n                id: v1(),\r\n                message: action.newMessagePost,\r\n                likes: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                userProfile: action.userProfile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n///////////////////////////////////////////////// action creators //////////////////////////////\r\n\r\nexport const addPost = (newMessagePost: string) => {\r\n    return {type: ADD_NEW_POST, newMessagePost: newMessagePost} as const\r\n}\r\nexport const setUserProfile = (userProfile: UserProfileType) => {\r\n    return {type: SET_USER_PROFILE, userProfile: userProfile} as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {type: SET_STATUS, status: status} as const\r\n}\r\n\r\n//////////////////////////////////////////////////// THUNK //////////////////////////////////////\r\n\r\nexport const getProfile = (userId: number): AppThunkType => async dispatch => {\r\n        dispatch(toggleLoading(true))\r\n       const res = await profileApi.getProfile(userId)\r\n\r\n                dispatch(toggleLoading(false))\r\n                dispatch(setUserProfile(res.data))\r\n}\r\n\r\nexport const getStatus = (userId: string | undefined): AppThunkType => async dispatch => {\r\n        dispatch(toggleLoading(true))\r\n      const res =  await profileApi.getStatus(userId)\r\n\r\n                dispatch(toggleLoading(false))\r\n                dispatch(setStatus(res.data))\r\n}\r\n\r\nexport const updateStatus = (status: string): AppThunkType => async dispatch => {\r\n       const res = await profileApi.updateStatus(status)\r\n\r\n                if(res.data.resultCode === 0)\r\n                dispatch(setStatus(status))\r\n}","import {v1} from \"uuid\";\r\n\r\nconst CHANGE_SHOW_FRIENDS = 'SOCIAL-NETWORK/SIDEBAR/CHANGE-SHOW-FRIENDS'\r\n\r\nexport type SidebarActionsType = ChangeShowFriendsActionType\r\ntype ChangeShowFriendsActionType = ReturnType<typeof changeShowFriends>\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n    showFriends: boolean\r\n}\r\ntype FriendsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nconst initialState: SidebarType = {\r\n    friends: [\r\n        {id: v1(), name: 'Alena'},\r\n        {id: v1(), name: 'Dima'},\r\n        {id: v1(), name: 'Kolya'},\r\n        {id: v1(), name: 'Usik'}\r\n    ],\r\n    showFriends: true\r\n}\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: SidebarActionsType): SidebarType => {\r\n    switch (action.type) {\r\n        case CHANGE_SHOW_FRIENDS:\r\n            return {\r\n                ...state,\r\n                showFriends: !state.showFriends\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const changeShowFriends = () => {\r\n    return {type: CHANGE_SHOW_FRIENDS} as const\r\n}","import {authApi} from \"../api/api\";\r\nimport {AppThunkType} from \"./Redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_AUTH_DATA = 'SOCIAL-NETWORK/AUTH/SET_AUTH_DATA'\r\n\r\nexport type AuthActionType = SetAuthActionType\r\ntype SetAuthActionType = ReturnType<typeof setAuthData>\r\n\r\nexport type AuthType = {\r\n    id: string | undefined,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: AuthType = {\r\n    id: undefined,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: AuthType = initialState, action: AuthActionType): AuthType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: action.isAuth\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////////////// action creators ///////////////////////////////\r\n\r\nexport const setAuthData = (id: string | undefined, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {type: SET_AUTH_DATA, payload: {id, email, login}, isAuth: isAuth} as const\r\n}\r\n\r\n//////////////////////////////////////////////////// THUNK //////////////////////////////////////////\r\n\r\nexport const getAuthMe = (): AppThunkType => async dispatch => {\r\n\r\n    const res = await authApi.authMe()\r\n    if (res.data.resultCode === 0) {\r\n        const {id, email, login} = res.data.data\r\n        dispatch(setAuthData(id, email, login, true))\r\n    }\r\n    return res\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunkType => async dispatch => {\r\n\r\n    const res = await authApi.login(email, password, rememberMe)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(getAuthMe())\r\n    } else {\r\n        const errorMessage = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error!'\r\n        dispatch(stopSubmit('login', {_error: errorMessage}))\r\n    }\r\n}\r\n\r\nexport const logout = (): AppThunkType => async dispatch => {\r\n\r\n    const res = await authApi.logout()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setAuthData(undefined, null, null, false))\r\n    }\r\n}\r\n","import {AppThunkType} from \"./Redux-store\";\r\nimport {getAuthMe} from \"./authReducer\";\r\n\r\nconst SET_INITIALIZATION = 'SOCIAL-NETWORK/APP/SET_INITIALIZATION'\r\n\r\nexport type AppCommonActionType = SetInitializationActionType\r\ntype SetInitializationActionType = ReturnType<typeof setInitialization>\r\nexport type AppCommonType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState: AppCommonType = {\r\n    initialized: false\r\n}\r\n\r\nexport const AppReducer = (state: AppCommonType = initialState, action: AppCommonActionType): AppCommonType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZATION:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////////////// action creators ///////////////////////////////\r\n\r\nexport const setInitialization = () => {\r\n    return {type: SET_INITIALIZATION} as const\r\n}\r\n\r\n//////////////////////////////////////////////////// THUNK //////////////////////////////////////////\r\n\r\nexport const initializeApp = (): AppThunkType => dispatch => {\r\n\r\n    const promise = dispatch(getAuthMe())\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(setInitialization())\r\n        })\r\n}\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ProfileActionsType, profileReducer} from \"./profilePageReducer\";\r\nimport {DialogPageActionsType, dialogReducer} from \"./dialogPageReducer\";\r\nimport {SidebarActionsType, sidebarReducer} from \"./sidebarReducer\";\r\nimport {UsersActionsType, usersReducer} from \"./usersReducer\";\r\nimport {AuthActionType, authReducer} from \"./authReducer\";\r\nimport {AppCommonActionType, AppReducer} from \"./AppReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: AppReducer,\r\n    form: formReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType =\r\n    | AuthActionType\r\n    | DialogPageActionsType\r\n    | ProfileActionsType\r\n    | SidebarActionsType\r\n    | UsersActionsType\r\n    | AppCommonActionType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\n","export const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}","export const News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}","export const Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}","import {changeShowFriends, SidebarType} from \"../../redux/sidebarReducer\";\r\nimport {Navbar} from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\n\r\nexport type NavbarPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    sidebar: SidebarType\r\n}\r\ntype MapDispatchPropsType = {\r\n    changeShowFriends: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\n\r\nexport const NavbarContainer = connect(mapStateToProps, {changeShowFriends}) (Navbar)","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\"\r\nimport {Button} from \"../common/buttons/Button\";\r\nimport {NavbarPropsType} from \"./NavbarContainer\";\r\n\r\nexport const Navbar: React.FC<NavbarPropsType> = (props) => {\r\n    const {\r\n        changeShowFriends,\r\n        sidebar\r\n    } = props\r\n\r\n    const friends = sidebar.friends.map((u) => <div key={u.id}>friend</div>/*<user key={u.id} id={u.id} name={u.name}/>*/)\r\n\r\n    return (\r\n        <nav className={s.navbar}>\r\n            <div className={s.navbarItems}>\r\n                <div className={s.item}>\r\n                    <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/dialogs' activeClassName={s.active}>Message</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/news' activeClassName={s.active}>News</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/music' activeClassName={s.active}>Music</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/settings' activeClassName={s.active}>Settings</NavLink>\r\n                </div>\r\n            </div>\r\n\r\n            <h3>Friends</h3>\r\n            <div className={s.listFriends}>\r\n                <div className={s.friends}>\r\n                    {sidebar.showFriends && friends}\r\n                </div>\r\n                {sidebar.showFriends ? <Button onClickHandler={changeShowFriends} buttonName={'hide friends'}/> :\r\n                    <Button onClickHandler={changeShowFriends} buttonName={'show friends'}/>}\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState('')\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div style={{marginLeft: '20px'}}>\r\n            {!editMode &&\r\n            <div>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {status ? status : 'What is new?'}\r\n                    </span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                />\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import s from './ProfileInfo.module.css';\r\nimport React from \"react\";\r\nimport {UserProfileType} from \"../../../redux/profilePageReducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport ava from '../../../assets/images/Avaimg.png'\r\n\r\ntype PropsType = {\r\n    userProfile: UserProfileType | null\r\n    loading: boolean\r\n    status: string | ''\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.info}>\r\n            <div>\r\n                {!props.loading && props.userProfile ?\r\n                    <img alt={''}\r\n                         style={{width: '300px', height: '300px'}}\r\n                         src={props.userProfile.photos.large ? props.userProfile.photos.large : ava}/> :\r\n                    <Preloader/>\r\n                }\r\n            </div>\r\n            <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport ava from \"../../../../assets/images/Avaimg.png\"\r\nimport s from \"./Post.module.css\"\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nexport const Post: React.FC<PropsType> = (props) => {\r\n    const {message, likes} = props\r\n\r\n    return (\r\n        <div className={s.post_item}>\r\n            <img alt={''} src={ava}/>\r\n            <span className={s.post}>\r\n                {message}\r\n            </span>\r\n            <span className={s.like}>\r\n                likes: {likes}\r\n            </span>\r\n        </div>\r\n    )\r\n}","import s from \"./MyPosts.module.css\";\r\nimport React from \"react\";\r\nimport {Post} from \"./post/Post\";\r\nimport {PostType} from \"../../../redux/profilePageReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Button} from \"../../common/buttons/Button\";\r\nimport {Textarea} from \"../../common/form-elements/FormElements\";\r\nimport {maxLength10, required} from \"../../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newMessagePost: string) => void\r\n}\r\n\r\nexport const MyPosts: React.FC<PropsType> = React.memo((props) => {\r\n    console.log('render')\r\n    const {addPost, posts,} = props\r\n\r\n    const postsElement = [...posts].reverse().map((p) => <Post key={p.id} message={p.message} likes={p.likes}/>)\r\n\r\n    const AddNewPost = (formData: FormPostDataType) => {\r\n        addPost(formData.newPost)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className={s.heading}>-- My posts --</h3>\r\n            <div className={s.add_post}>\r\n                <AddPostReduxForm onSubmit={AddNewPost}/>\r\n            </div>\r\n            <div className={s.post}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport type FormPostDataType = {\r\n    newPost: string\r\n}\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormPostDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <div>\r\n                <Field placeholder={'enter your post'}\r\n                       name={'newPost'}\r\n                       component={Textarea}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n                <Button buttonName={'add post'}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<FormPostDataType>({\r\n    form: 'MyPostForm'  // уникальное имя для формы\r\n})(AddPostForm)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\nimport {\r\n    addPost,\r\n    getProfile,\r\n    getStatus,\r\n    PostType,\r\n    updateStatus,\r\n    UserProfileType\r\n} from \"../../redux/profilePageReducer\";\r\nimport s from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {MyPosts} from \"./my-posts/MyPosts\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n    userProfile: UserProfileType | null\r\n    loading: boolean\r\n    isAuth: boolean\r\n    myId: string | undefined\r\n    status: string | ''\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newMessagePost: string) => void\r\n    getProfile: (userId: string | undefined) => void\r\n    getStatus: (userId: string | undefined) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\ntype ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount(): void {\r\n        let userId = this.props.match.params.userId    //<==== get the id from the browser line using (withRouter)\r\n        if(!userId) {\r\n            userId = this.props.myId\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.content}>\r\n                <ProfileInfo\r\n                    userProfile={this.props.userProfile}\r\n                    loading={this.props.loading}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                />\r\n                <MyPosts\r\n                    posts={this.props.posts}\r\n                    addPost={this.props.addPost}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        userProfile: state.profilePage.userProfile,\r\n        loading: state.usersPage.loading,\r\n        isAuth: state.auth.isAuth,\r\n        myId: state.auth.id,\r\n        status: state.profilePage.status,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(                                                         // по очереди обворачиваем\r\n    connect(mapStateToProps, {addPost, getProfile, getStatus, updateStatus}),        //\r\n    withRouter,                                                                                      // HOC - ами\r\n    withAuthRedirect                                                                                 // Higher-Order Component\r\n) (ProfileContainer)\r\n\r\n","import React from \"react\"\r\nimport s from \"./Header.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button} from \"../common/buttons/Button\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nexport const Header = (props: PropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.login}>\r\n                {props.isAuth ?\r\n                    <div> {props.login} <Button onClickHandler={props.logout} buttonName={'LogOut'}/> </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\nimport {Header} from \"./Header\";\r\nimport {logout} from \"../../redux/authReducer\";\r\n\r\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nexport class HeaderApiContainer extends React.Component<HeaderPropsType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header\r\n                isAuth={this.props.isAuth}\r\n                login={this.props.login}\r\n                logout={this.props.logout}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport const HeaderContainer = connect(mapStateToProps, {logout}) (HeaderApiContainer)\r\n\r\n","import React from 'react'\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport {Field} from \"redux-form\";\r\nimport {Input} from \"../common/form-elements/FormElements\";\r\nimport {maxLength100, required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\nimport {Button} from \"../common/buttons/Button\";\r\nimport s from './Login.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'email'}\r\n                       name={'email'}\r\n                       component={Input}\r\n                       validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'password'}\r\n                       name={'password'}\r\n                       component={Input}\r\n                       validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={Input}\r\n                       name={'rememberMe'}\r\n                       type={'checkbox'}\r\n                /> remember me\r\n            </div>\r\n            { props.error && <div className={s.error}>{props.error}</div> }\r\n            <div>\r\n                <Button buttonName={'Login'}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: 'login'  // уникальное имя для формы\r\n})(LoginForm)\r\n\r\n\r\n\r\ntype PropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst Login = (props: PropsType) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if(props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)\r\n","import React, {Suspense} from 'react';\nimport './App.css';\nimport {Route, withRouter} from \"react-router-dom\";\nimport {Settings} from \"./components/settings/Settings\";\nimport {News} from \"./components/news/News\";\nimport {Music} from \"./components/music/Music\";\nimport {NavbarContainer} from \"./components/navbar/NavbarContainer\";\nimport ProfileContainer from \"./components/profile/ProfileContainer\";\nimport {HeaderContainer} from \"./components/header/HeaderContainer\";\nimport Login from \"./components/login/Login\";\nimport {connect} from \"react-redux\";\nimport {compose} from 'redux';\nimport {initializeApp} from \"./redux/AppReducer\";\nimport {AppRootStateType} from \"./redux/Redux-store\";\nimport {Preloader} from \"./components/common/preloader/Preloader\";\n\nconst Dialogs = React.lazy(() => import('./components/dialogs/DialogsContainer'))\nconst UsersContainer = React.lazy(() => import('./components/users/UsersContainer'))\n\ntype PropsType = {\n    initializeApp: () => void\n    initialized: boolean\n}\ntype MapStateToPropsType = {\n    initialized: boolean\n}\n\nclass App extends React.Component<PropsType> {\n\n    componentDidMount(): void {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <NavbarContainer/>\n                <div className={'app-wrapper-content'}>\n                    <Route exact path='/' render={() => <ProfileContainer/>}/>\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                    <Route path='/dialogs' render={() => {\n                        return <Suspense fallback={<Preloader/>}>\n                            <Dialogs/>\n                        </Suspense>\n                    }}/>\n                    <Route path='/users' render={() => {\n                        return <Suspense fallback={<Preloader/>}>\n                            <UsersContainer/>\n                        </Suspense>\n                    }}/>\n                    <Route path='/music' render={() => <Music/>}/>\n                    <Route path='/news' render={() => <News/>}/>\n                    <Route path='/settings' render={() => <Settings/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {initializeApp}),\n    withRouter)(App)\n\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/Redux-store'\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n)\nreportWebVitals();\n","export const required = (value: number | string) => {\r\n    if (value) return undefined\r\n    return 'Field is required to enter!'\r\n}\r\n\r\nconst maxLengthValid = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols!`\r\n    }else{\r\n        return undefined\r\n    }\r\n}\r\nexport const maxLength10 = maxLengthValid(10)\r\nexport const maxLength100 = maxLengthValid(100)\r\n\r\n\r\n","import {usersApi} from \"../api/api\";\r\nimport {AppThunkType} from \"./Redux-store\";\r\nimport {Dispatch} from \"react\";\r\n\r\nconst UNFOLLOW = 'SOCIAL-NETWORK/USERS/UNFOLLOW'\r\nconst FOLLOW = 'SOCIAL-NETWORK/USERS/FOLLOW'\r\nconst SET_USERS = 'SOCIAL-NETWORK/USERS/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SOCIAL-NETWORK/USERS/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_COUNT = 'SOCIAL-NETWORK/USERS/SET_TOTAL_COUNT'\r\nconst TOGGLE_LOADING = 'SOCIAL-NETWORK/USERS/TOGGLE_LOADING'\r\nconst TOGGLE_FOLLOWING_PROGRESS = 'SOCIAL-NETWORK/USERS/TOGGLE_FOLLOWING_PROGRESS'\r\n\r\nexport type UsersActionsType =\r\n    | UnfollowActionType\r\n    | FollowActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalCountActionType\r\n    | ToggleLoadingActionType\r\n    | ToggleFollowingProgressActionType\r\n\r\ntype UnfollowActionType = ReturnType<typeof successedUnfollow>\r\ntype FollowActionType = ReturnType<typeof successedFollow>\r\ntype SetUsersActionType = ReturnType<typeof setUsers>\r\ntype SetCurrentPageActionType = ReturnType<typeof setCurrentPage>\r\ntype SetTotalCountActionType = ReturnType<typeof setTotalCount>\r\ntype ToggleLoadingActionType = ReturnType<typeof toggleLoading>\r\ntype ToggleFollowingProgressActionType = ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UserType>\r\n    count: number\r\n    totalCount: number\r\n    currentPage: number\r\n    loading: boolean\r\n    followingProgress: Array<number>\r\n}\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n    status: string\r\n}\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nconst initialState: UsersPageType = {\r\n    users: [],\r\n    count: 50,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    loading: false,\r\n    followingProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: UsersActionsType): UsersPageType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        case TOGGLE_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingProgress: action.isLoading\r\n                    ? [...state.followingProgress, action.userId]\r\n                    : state.followingProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n////////////////////////////////////////////// action creators ///////////////////////////////\r\n\r\nexport const successedFollow = (userId: number) => {\r\n    return {type: FOLLOW, userId: userId} as const\r\n}\r\nexport const successedUnfollow = (userId: number) => {\r\n    return {type: UNFOLLOW, userId: userId} as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {type: SET_USERS, users: users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: SET_CURRENT_PAGE, currentPage: currentPage} as const\r\n}\r\nexport const setTotalCount = (totalCount: number) => {\r\n    return {type: SET_TOTAL_COUNT, totalCount: totalCount} as const\r\n}\r\nexport const toggleLoading = (loading: boolean) => {\r\n    return {type: TOGGLE_LOADING, loading: loading} as const\r\n}\r\nexport const toggleFollowingProgress = (isLoading: boolean, userId: number) => {\r\n    return {type: TOGGLE_FOLLOWING_PROGRESS, isLoading: isLoading, userId: userId} as const\r\n}\r\n\r\n//////////////////////////////////////////// THUNK ////////////////////////////////////////////////////////////////\r\n\r\nexport const requestUsers = (currentPage: number, count: number): AppThunkType => async dispatch => {\r\n    dispatch(setCurrentPage(currentPage))\r\n    dispatch(toggleLoading(true))\r\n    const res = await usersApi.getUsers(currentPage, count)\r\n    dispatch(toggleLoading(false))\r\n    dispatch(setUsers(res.data.items))\r\n    dispatch(setTotalCount(res.data.totalCount))\r\n}\r\n\r\nexport const follow = (userId: number): AppThunkType => async dispatch => {\r\n    followUnfollowFlow(dispatch, userId, usersApi.follow(userId), successedFollow)\r\n}\r\n\r\nexport const unfollow = (userId: number): AppThunkType => async dispatch => {\r\n    followUnfollowFlow(dispatch, userId, usersApi.unfollow(userId), successedUnfollow)\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: Dispatch<UsersActionsType>,                 //// Helper function\r\n                                  userId: number,\r\n                                  apiMethod: any,\r\n                                  actionCreator: (userId: number) => FollowActionType | UnfollowActionType) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    const res = await apiMethod(userId)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n","import React from 'react'\r\nimport s from './FormElements.module.css'\r\n\r\nexport const Textarea = ({input, meta, ...props}: any) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.formElement} ${hasError && s.error}`}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.formElement} ${hasError && s.error}`}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/preloader.d3fbaf2b.gif\";","import preloader from \"../../../assets/images/preloader.gif\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img alt={'there should be '} src={preloader}/>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formElement\":\"FormElements_formElement__2tkD1\",\"error\":\"FormElements_error__gdMqo\"};","export default __webpack_public_path__ + \"static/media/Avaimg.4e89b174.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"MyPosts_heading__3mMuh\",\"add_post\":\"MyPosts_add_post__2UtlE\",\"post\":\"MyPosts_post__ROcyD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_item\":\"Post_post_item__21zv8\",\"like\":\"Post_like__1Fhs5\",\"post\":\"Post_post__1Uo7o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__2ant2\",\"active\":\"Buttons_active__1jy1t\"};"],"sourceRoot":""}