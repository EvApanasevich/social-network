{"version":3,"sources":["redux/dialogPageReducer.ts","api/api.ts","hok/withAuthRedirect.tsx","components/common/buttons/Button.tsx","components/common/form-elements/FormElements.tsx","components/navbar/Navbar.module.css","redux/profilePageReducer.ts","components/login/Login.module.css","reportWebVitals.ts","redux/sidebarReducer.ts","redux/authReducer.ts","redux/AppReducer.ts","redux/Redux-store.ts","components/settings/Settings.tsx","components/navbar/NavbarContainer.tsx","components/navbar/Navbar.tsx","components/profile/profileInfo/ProfileStatus.tsx","components/profile/profileInfo/ProfileInfoForm.tsx","components/profile/profileInfo/Info.tsx","components/profile/profileInfo/ProfileInfo.tsx","components/profile/my-posts/post/Post.tsx","components/profile/my-posts/MyPosts.tsx","components/profile/ProfileContainer.tsx","components/header/Header.tsx","components/header/HeaderContainer.tsx","utils/validators/validators.ts","components/login/LoginForm.tsx","components/login/Login.tsx","App.tsx","index.tsx","components/profile/profileInfo/ProfileInfo.module.css","redux/usersReducer.ts","assets/images/preloader.gif","components/common/preloader/Preloader.tsx","components/common/form-elements/FormElements.module.css","components/header/Header.module.css","assets/images/notAva.png","components/profile/my-posts/MyPosts.module.css","components/profile/my-posts/post/Post.module.css","components/common/buttons/Buttons.module.css"],"names":["SET_ALL_DIALOGS","SET_ACTIVE_DIALOG","SET_MESSAGES","SET_MESSAGES_CURRENT_PAGE","SET_DIALOG_IS_OPEN","initialState","dialogs","activeDialogId","dialogIsOpen","messages","messagesCount","messagesCurrentPage","messagesTotalCount","dialogReducer","state","action","type","payload","setActiveDialog","setDialogIsOpen","setMessagesCurrentPage","createNewDialog","userId","dispatch","getState","a","dialogPage","dialogsApi","createDialog","data","resultCode","getMessages","getAllDialogs","getDialogs","res","sendMessage","message","id","items","totalCount","deleteMessage","messageId","instance","axios","create","baseURL","withCredentials","headers","usersApi","getUsers","currentPage","count","get","follow","post","unfollow","delete","profileApi","getProfile","getStatus","updateStatus","status","put","updatePhoto","photofile","formData","FormData","append","saveProfileInfo","body","authApi","authMe","login","email","password","rememberMe","captcha","logout","securityApi","getCaptchaUrl","mapStateToProps","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","Button","onClickHandler","buttonName","style","useState","st","setStyle","onMouseEnter","event","onMouseLeave","className","s","active","button","onClick","Textarea","input","meta","hasError","touched","error","formElement","Input","Checkbox","module","exports","ADD_NEW_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO","TOGGLE_EDIT_FORM","posts","v1","likes","userProfile","editForm","profileReducer","newPost","newMessagePost","photos","edit","addPost","setStatus","toggleEditForm","toggleLoading","photoUpload","Photofile","myId","errorMessage","length","stopSubmit","_error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CHANGE_SHOW_FRIENDS","friends","name","showFriends","SET_AUTH_DATA","SET_CAPTCHA_URL","captchaUrl","setAuthData","setCaptchaUrl","getAuthMe","getCaptcha","url","SET_INITIALIZATION","initialized","rootReducer","combineReducers","profilePage","sidebar","usersPage","usersReducer","app","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","Settings","NavbarContainer","changeShowFriends","map","u","navbar","navbarItems","item","activeClassName","listFriends","ProfileStatus","editMode","setEditMode","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","reduxForm","onSubmit","handleSubmit","info_form","Field","placeholder","component","Object","keys","contacts","key","Info","isOwner","onEditMode","info","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","React","memo","ProfileInfo","loading","profileInfoBlock","photo","alt","src","large","ava","Preloader","target","files","Post","profilePhoto","post_item","like","MyPosts","postsElement","reverse","p","heading","add_post","AddPostReduxForm","ProfileContainer","Number","this","match","params","changeProfile","prevProps","prevState","snapshot","content","compose","withRouter","Header","header","headerContainer","navlink","HeaderApiContainer","HeaderContainer","required","maxLengthValid","maxLength","maxLength100","validate","checkbox","btn","logForm","Dialogs","lazy","UsersContainer","App","initializeApp","path","render","fallback","exact","promise","Promise","all","ReactDOM","document","getElementById","UNFOLLOW","FOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_LOADING","TOGGLE_FOLLOWING_PROGRESS","users","followingProgress","followed","isLoading","filter","successedFollow","successedUnfollow","setCurrentPage","toggleFollowingProgress","requestUsers","preloader"],"mappings":"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","file":"static/js/main.cda6b1b8.chunk.js","sourcesContent":["import {dialogsApi} from './../api/api';\r\nimport {PhotosType} from './usersReducer';\r\nimport {AppThunkType} from \"./Redux-store\";\r\n\r\nconst SET_ALL_DIALOGS = 'SOCIAL_NETWORK/DIALOG/SET_ALL_DIALOGS'\r\nconst SET_ACTIVE_DIALOG = 'SOCIAL_NETWORK/DIALOG/SET_ACTIVE_DIALOG'\r\nconst SET_MESSAGES = 'SOCIAL_NETWORK/DIALOG/SET_MESSAGES'\r\nconst SET_MESSAGES_CURRENT_PAGE = 'SOCIAL_NETWORK/DIALOG/SET_MESSAGES_CURRENT_PAGE'\r\nconst SET_DIALOG_IS_OPEN = 'SOCIAL_NETWORK/DIALOG/SET_DIALOG_IS_OPEN'\r\n\r\nexport type DialogPageActionsType =\r\n    | SetAllDialogsActionType\r\n    | setActiveDialogActionType\r\n    | setMessagesActionType\r\n    | setMessagesCurrentPageActionType\r\n    | setDialogIsOpenActionType\r\n\r\ntype SetAllDialogsActionType = ReturnType<typeof setAllDialogs>\r\ntype setActiveDialogActionType = ReturnType<typeof setActiveDialog>\r\ntype setMessagesActionType = ReturnType<typeof setMessages>\r\ntype setMessagesCurrentPageActionType = ReturnType<typeof setMessagesCurrentPage>\r\ntype setDialogIsOpenActionType = ReturnType<typeof setDialogIsOpen>\r\n\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>\r\n    activeDialogId: number | null\r\n    dialogIsOpen: boolean\r\n    messages: Array<MessageType>\r\n    messagesCount: number\r\n    messagesCurrentPage: number\r\n    messagesTotalCount: number\r\n}\r\nexport type DialogType = {\r\n    id: number\r\n    userName: string\r\n    hasNewMessages: boolean\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photos: PhotosType\r\n}\r\nexport type MessageType = {\r\n    id: string\r\n    body: string\r\n    addedAt: string\r\n    recipientId: number\r\n    senderId: number\r\n    senderName: string\r\n    translatedBody: string | null\r\n    viewed: boolean\r\n}\r\n\r\nlet initialState: DialogPageType = {\r\n    dialogs: [],\r\n    activeDialogId: null,\r\n    dialogIsOpen: false,\r\n    messages: [],\r\n    messagesCount: 20,\r\n    messagesCurrentPage: 1,\r\n    messagesTotalCount: 0\r\n}\r\n\r\nexport const dialogReducer = (state: DialogPageType = initialState, action: DialogPageActionsType): DialogPageType => {\r\n    switch (action.type) {\r\n        case SET_ALL_DIALOGS:\r\n        case SET_ACTIVE_DIALOG:\r\n        case SET_MESSAGES:\r\n        case SET_MESSAGES_CURRENT_PAGE:\r\n        case SET_DIALOG_IS_OPEN:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ACTIONS\r\nexport const setAllDialogs = (dialogs: Array<DialogType>) => {\r\n    return {type: SET_ALL_DIALOGS, payload: {dialogs}} as const\r\n}\r\nexport const setActiveDialog = (activeDialogId: number | null) => {\r\n    return {type: SET_ACTIVE_DIALOG, payload: {activeDialogId}} as const\r\n}\r\nexport const setDialogIsOpen = (dialogIsOpen: boolean) => {\r\n    return {type: SET_DIALOG_IS_OPEN, payload: {dialogIsOpen}}\r\n}\r\nconst setMessages = (messages: Array<MessageType>, messagesTotalCount: number) => {\r\n    return {type: SET_MESSAGES, payload: {messages, messagesTotalCount}} as const\r\n}\r\nconst setMessagesCurrentPage = (messagesCurrentPage: number) => {\r\n    return {type: SET_MESSAGES_CURRENT_PAGE, payload: {messagesCurrentPage}} as const\r\n}\r\n\r\n//THUNK\r\nexport const createNewDialog = (userId: number): AppThunkType => async (dispatch, getState) => {\r\n    const messagesCount = getState().dialogPage.messagesCount\r\n    try {\r\n        const res = await dialogsApi.createDialog(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setActiveDialog(userId))\r\n            dispatch(getMessages(1, messagesCount))\r\n            dispatch(getAllDialogs())\r\n        }\r\n    } catch (error) {\r\n    }\r\n}\r\n\r\nexport const getAllDialogs = (): AppThunkType => async dispatch => {\r\n    try {\r\n        const res = await dialogsApi.getDialogs()\r\n        dispatch(setAllDialogs(res.data))\r\n    } catch (error) {\r\n    }\r\n}\r\n\r\nexport const sendMessage = (message: string): AppThunkType => async (dispatch, getState) => {\r\n    const id = getState().dialogPage.activeDialogId\r\n    const messagesCount = getState().dialogPage.messagesCount\r\n    try {\r\n        const res = await dialogsApi.sendMessage(id, message)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(getMessages(1, messagesCount))\r\n        }\r\n    } catch {\r\n    }\r\n}\r\n\r\nexport const getMessages = (messagesCurrentPage: number, messagesCount: number): AppThunkType => async (dispatch, getState) => {\r\n    const activeDialogId = getState().dialogPage.activeDialogId\r\n    try {\r\n        dispatch(setMessagesCurrentPage(messagesCurrentPage))\r\n        const res = await dialogsApi.getMessages(activeDialogId, messagesCurrentPage, messagesCount)\r\n        dispatch(setMessages(res.data.items, res.data.totalCount))\r\n    } catch {\r\n    }\r\n}\r\n\r\nexport const deleteMessage = (messageId: string): AppThunkType => async (dispatch, getState) => {\r\n    const messagesCurrentPage = getState().dialogPage.messagesCurrentPage\r\n    const messagesCount = getState().dialogPage.messagesCount\r\n    try {\r\n        const res = await dialogsApi.deleteMessage(messageId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(getMessages(messagesCurrentPage, messagesCount))\r\n        }\r\n    } catch {\r\n    }\r\n}\r\n","import axios from \"axios\";\r\nimport {InfoFormType} from \"../components/profile/profileInfo/ProfileInfoForm\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        //'API-KEY': 'b173ba34-22d3-4323-a92a-0dbd941b56f3'     //EvgenSamuraj\r\n        'API-KEY': '6a795579-4777-4823-b36d-7e83af06d2e8'       //EvgenSamuraj33\r\n    }\r\n})\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number, count: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${count}`)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    }\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: number | null) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status', {status: status})\r\n    },\r\n    updatePhoto(photofile: any) {\r\n        const formData = new FormData()\r\n        formData.append('image', photofile)\r\n        return instance.put('profile/photo', formData, {headers: {'Content-Type': 'multipart/form-data'}})\r\n    },\r\n    saveProfileInfo(formData: InfoFormType) {\r\n        return instance.put('profile', formData)\r\n    }\r\n}\r\n\r\nexport const dialogsApi = {\r\n   createDialog(userId: number) {\r\n       return instance.put(`dialogs/${userId}`)\r\n   },\r\n   getDialogs() {\r\n      return instance.get(`dialogs`)\r\n   },\r\n   sendMessage(id: number | null, body: string) {\r\n      return instance.post(`dialogs/${id}/messages`, {body})\r\n   },\r\n   getMessages(id: number | null,  messagesCurrentPage: number, messagesCount: number) {\r\n      return instance.get(`dialogs/${id}/messages?page=${messagesCurrentPage}&count=${messagesCount}`)\r\n   },\r\n   deleteMessage(id: string) {\r\n      return instance.delete(`dialogs/messages/${id}`)\r\n   }\r\n}\r\n\r\nexport const authApi = {\r\n    authMe() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: string) {\r\n        return instance.post('auth/login', {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptchaUrl() {\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n\r\n\r\n","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/Redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    const RedirectedComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return RedirectedComponent\r\n}","import React, {MouseEvent, useState} from \"react\";\r\nimport s from './Buttons.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    onClickHandler?: () => void\r\n    buttonName?: string\r\n    style?: {}\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    const {\r\n        onClickHandler,\r\n        buttonName,\r\n        style,\r\n    } = props\r\n\r\n    const [st, setStyle] = useState<boolean>(false)\r\n    const setClass = (event: MouseEvent<HTMLButtonElement>) => {\r\n        setStyle(true)\r\n    }\r\n    const delClass = (event: MouseEvent<HTMLButtonElement>) => {\r\n        setStyle(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                onMouseEnter={setClass}\r\n                onMouseLeave={delClass}\r\n                className={st ? s.active : s.button}\r\n                onClick={onClickHandler}\r\n                style={style}\r\n            >\r\n                {buttonName}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport s from './FormElements.module.css'\r\n\r\nexport const Textarea = ({input, meta, ...props}: any) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.formElement} ${hasError && s.error}`}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.formElement} ${hasError && s.error}`}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Checkbox = ({input, meta, ...props}: any) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input type='checkbox' {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__3JtJA\",\"navbarItems\":\"Navbar_navbarItems__3IyF9\",\"item\":\"Navbar_item__3px6H\",\"active\":\"Navbar_active__2GpVG\",\"friends\":\"Navbar_friends__2MIms\",\"listFriends\":\"Navbar_listFriends__2UX4P\"};","import {v1} from \"uuid\";\r\nimport {profileApi} from \"../api/api\";\r\nimport {toggleLoading} from \"./usersReducer\";\r\nimport {AppThunkType} from \"./Redux-store\";\r\nimport {InfoFormType} from \"../components/profile/profileInfo/ProfileInfoForm\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst ADD_NEW_POST = 'SOCIAL-NETWORK/PROFILE/ADD-NEW-POST'\r\nconst SET_USER_PROFILE = 'SOCIAL-NETWORK/PROFILE/SET_USER_PROFILE'\r\nconst SET_STATUS = 'SOCIAL-NETWORK/PROFILE/SET_STATUS'\r\nconst SAVE_PHOTO = 'SOCIAL-NETWORK/PROFILE/SAVE_PHOTO'\r\nconst TOGGLE_EDIT_FORM = 'SOCIAL-NETWORK/PROFILE/TOGGLE_EDIT_FORM'\r\n\r\nexport type ProfileActionsType =\r\n    | AddPostActionType\r\n    | SetUserProfileActionType\r\n    | GetStatusActionType\r\n    | SavePhotoActionType\r\n    | editModeFormType\r\n\r\ntype AddPostActionType = ReturnType<typeof addPost>                     // лучше типизировать так\r\ntype SetUserProfileActionType = ReturnType<typeof setUserProfile>\r\ntype GetStatusActionType = ReturnType<typeof setStatus>\r\ntype SavePhotoActionType = ReturnType<typeof savePhoto>\r\ntype editModeFormType = ReturnType<typeof toggleEditForm>\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n}\r\nexport type UserProfileType = {\r\n    aboutMe: string\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n}\r\nexport type ContactsType = {\r\n    [key: string]: string\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: v1(), message: 'Hi, my friends!', likes: 10},\r\n        {id: v1(), message: 'yo, yo', likes: 5},\r\n        {id: v1(), message: 'ya-hu-how!', likes: 7}\r\n    ] as Array<PostType>,\r\n    userProfile: null as UserProfileType | null,\r\n    editForm: false,\r\n    status: ''\r\n}\r\n\r\nexport type ProfilePageType = typeof initialState\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ProfileActionsType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_POST:\r\n            let newPost = {\r\n                id: v1(),\r\n                message: action.newMessagePost,\r\n                likes: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                userProfile: action.userProfile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        case SAVE_PHOTO:\r\n            return {\r\n                ...state,\r\n                userProfile: {...state.userProfile, photos: action.photos} as UserProfileType\r\n            }\r\n        case TOGGLE_EDIT_FORM:\r\n            return {\r\n                ...state,\r\n                editForm: action.edit\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n///////////////////////////////////////////////// action creators //////////////////////////////\r\n\r\nexport const addPost = (newMessagePost: string) => {\r\n    return {type: ADD_NEW_POST, newMessagePost: newMessagePost} as const\r\n}\r\nexport const setUserProfile = (userProfile: UserProfileType) => {\r\n    return {type: SET_USER_PROFILE, userProfile: userProfile} as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {type: SET_STATUS, status: status} as const\r\n}\r\nexport const savePhoto = (photos: PhotosType) => {\r\n    return {type: SAVE_PHOTO, photos: photos} as const\r\n}\r\nexport const toggleEditForm = (edit: boolean) => {\r\n    return {type: TOGGLE_EDIT_FORM, edit: edit} as const\r\n}\r\n\r\n//////////////////////////////////////////////////// THUNK //////////////////////////////////////\r\n\r\nexport const getProfile = (userId: number | null): AppThunkType => async dispatch => {\r\n    dispatch(toggleLoading(true))\r\n    const res = await profileApi.getProfile(userId)\r\n\r\n    dispatch(toggleLoading(false))\r\n    dispatch(setUserProfile(res.data))\r\n}\r\n\r\nexport const getStatus = (userId: number | null): AppThunkType => async dispatch => {\r\n\r\n    dispatch(toggleLoading(true))\r\n    const res = await profileApi.getStatus(userId)\r\n\r\n    dispatch(toggleLoading(false))\r\n    dispatch(setStatus(res.data))\r\n\r\n}\r\n\r\nexport const updateStatus = (status: string): AppThunkType => async dispatch => {\r\n    try {\r\n        const res = await profileApi.updateStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    } catch (error) {\r\n        debugger\r\n    }\r\n}\r\n\r\nexport const photoUpload = (Photofile: any): AppThunkType => async dispatch => {\r\n    const res = await profileApi.updatePhoto(Photofile)\r\n\r\n    if (res.data.resultCode === 0)\r\n        dispatch(savePhoto(res.data.data.photos))\r\n}\r\n\r\nexport const saveProfileInfo = (formData: InfoFormType): AppThunkType => async (dispatch, getState) => {\r\n    const myId = getState().auth.id\r\n    const res = await profileApi.saveProfileInfo(formData)\r\n\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(getProfile(myId))\r\n        dispatch(toggleEditForm(false))\r\n\r\n    } else {\r\n        const errorMessage = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error!'\r\n        dispatch(stopSubmit('edit-info', {_error: errorMessage}))\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logForm\":\"Login_logForm__q0yHB\",\"input\":\"Login_input__3aXKx\",\"checkbox\":\"Login_checkbox__2VWm2\",\"btn\":\"Login_btn__KifRG\",\"info\":\"Login_info__2Oq8a\",\"error\":\"Login_error__26nHC\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {v1} from \"uuid\";\r\n\r\nconst CHANGE_SHOW_FRIENDS = 'SOCIAL-NETWORK/SIDEBAR/CHANGE-SHOW-FRIENDS'\r\n\r\nexport type SidebarActionsType = ChangeShowFriendsActionType\r\ntype ChangeShowFriendsActionType = ReturnType<typeof changeShowFriends>\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n    showFriends: boolean\r\n}\r\ntype FriendsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nconst initialState: SidebarType = {\r\n    friends: [\r\n        {id: v1(), name: 'Alena'},\r\n        {id: v1(), name: 'Dima'},\r\n        {id: v1(), name: 'Kolya'},\r\n        {id: v1(), name: 'Usik'}\r\n    ],\r\n    showFriends: true\r\n}\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: SidebarActionsType): SidebarType => {\r\n    switch (action.type) {\r\n        case CHANGE_SHOW_FRIENDS:\r\n            return {\r\n                ...state,\r\n                showFriends: !state.showFriends\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const changeShowFriends = () => {\r\n    return {type: CHANGE_SHOW_FRIENDS} as const\r\n}","import {authApi, securityApi} from \"../api/api\";\r\nimport {AppThunkType} from \"./Redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_AUTH_DATA = 'SOCIAL-NETWORK/AUTH/SET_AUTH_DATA'\r\nconst SET_CAPTCHA_URL = 'SOCIAL-NETWORK/AUTH/SET_CAPTCHA_URL'\r\n\r\nexport type AuthActionType = SetAuthActionType | SetCaptchaUrlType\r\ntype SetAuthActionType = ReturnType<typeof setAuthData>\r\ntype SetCaptchaUrlType = ReturnType<typeof setCaptchaUrl>\r\n\r\nexport type AuthType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nexport const authReducer = (state: AuthType = initialState, action: AuthActionType): AuthType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_DATA:\r\n        case SET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////////////// action creators ///////////////////////////////\r\n\r\nexport const setAuthData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {type: SET_AUTH_DATA, payload: {id, email, login, isAuth: isAuth}} as const\r\n}\r\nexport const setCaptchaUrl = (captchaUrl: string | null) => {\r\n    return {type: SET_CAPTCHA_URL, payload: {captchaUrl}} as const\r\n}\r\n\r\n//////////////////////////////////////////////////// THUNK //////////////////////////////////////////\r\n\r\nexport const getAuthMe = (): AppThunkType => async dispatch => {\r\n\r\n    const res = await authApi.authMe()\r\n    if (res.data.resultCode === 0) {\r\n        const {id, email, login} = res.data.data\r\n        dispatch(setAuthData(id, email, login, true))\r\n    }\r\n    return res\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): AppThunkType => async dispatch => {\r\n\r\n    const res = await authApi.login(email, password, rememberMe, captcha)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(getAuthMe())\r\n    } else {\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptcha())\r\n        }\r\n        const errorMessage = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error!'\r\n        dispatch(stopSubmit('login', {_error: errorMessage}))\r\n    }\r\n}\r\n\r\nexport const logout = (): AppThunkType => async dispatch => {\r\n\r\n    const res = await authApi.logout()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setAuthData(null, null, null, false))\r\n        dispatch(setCaptchaUrl(null))\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): AppThunkType => async dispatch => {\r\n    const res = await securityApi.getCaptchaUrl()\r\n    dispatch(setCaptchaUrl(res.data.url))\r\n}\r\n","import {AppThunkType} from \"./Redux-store\";\r\nimport {getAuthMe} from \"./authReducer\";\r\n\r\nconst SET_INITIALIZATION = 'SOCIAL-NETWORK/APP/SET_INITIALIZATION'\r\n\r\nexport type AppCommonActionType = SetInitializationActionType\r\ntype SetInitializationActionType = ReturnType<typeof setInitialization>\r\nexport type AppCommonType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState: AppCommonType = {\r\n    initialized: false\r\n}\r\n\r\nexport const AppReducer = (state: AppCommonType = initialState, action: AppCommonActionType): AppCommonType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZATION:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////////////// action creators ///////////////////////////////\r\n\r\nexport const setInitialization = () => {\r\n    return {type: SET_INITIALIZATION} as const\r\n}\r\n\r\n//////////////////////////////////////////////////// THUNK //////////////////////////////////////////\r\n\r\nexport const initializeApp = (): AppThunkType => dispatch => {\r\n\r\n    const promise = dispatch(getAuthMe())\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(setInitialization())\r\n        })\r\n}\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ProfileActionsType, profileReducer} from \"./profilePageReducer\";\r\nimport {DialogPageActionsType, dialogReducer} from \"./dialogPageReducer\";\r\nimport {SidebarActionsType, sidebarReducer} from \"./sidebarReducer\";\r\nimport {UsersActionsType, usersReducer} from \"./usersReducer\";\r\nimport {AuthActionType, authReducer} from \"./authReducer\";\r\nimport {AppCommonActionType, AppReducer} from \"./AppReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: AppReducer,\r\n    form: formReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType =\r\n    | AuthActionType\r\n    | DialogPageActionsType\r\n    | ProfileActionsType\r\n    | SidebarActionsType\r\n    | UsersActionsType\r\n    | AppCommonActionType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n\r\n","export const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import {changeShowFriends, SidebarType} from \"../../redux/sidebarReducer\";\r\nimport {Navbar} from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\n\r\nexport type NavbarPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    sidebar: SidebarType\r\n}\r\ntype MapDispatchPropsType = {\r\n    changeShowFriends: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\n\r\nexport const NavbarContainer = connect(mapStateToProps, {changeShowFriends}) (Navbar)","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\"\r\nimport {Button} from \"../common/buttons/Button\";\r\nimport {NavbarPropsType} from \"./NavbarContainer\";\r\n\r\nexport const Navbar: React.FC<NavbarPropsType> = (props) => {\r\n    const {\r\n        changeShowFriends,\r\n        sidebar\r\n    } = props\r\n\r\n    const friends = sidebar.friends.map((u) => <div key={u.id}>friend</div>/*<user key={u.id} id={u.id} name={u.name}/>*/)\r\n\r\n    return (\r\n        <nav className={s.navbar}>\r\n            <div className={s.navbarItems}>\r\n                <div className={s.item}>\r\n                    <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/dialogs' activeClassName={s.active}>Messages</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\r\n                </div>\r\n                <div className={s.item}>\r\n                    <NavLink to='/settings' activeClassName={s.active}>Settings</NavLink>\r\n                </div>\r\n            </div>\r\n\r\n            <h3>Friends</h3>\r\n            <div className={s.listFriends}>\r\n                <div className={s.friends}>\r\n                    {sidebar.showFriends && friends}\r\n                </div>\r\n                {sidebar.showFriends ? <Button onClickHandler={changeShowFriends} buttonName={'hide friends'}/> :\r\n                    <Button onClickHandler={changeShowFriends} buttonName={'show friends'}/>}\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>('')\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {props.status ? props.status : 'What is new?'}\r\n                    </span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                />\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import {UserProfileType} from \"../../../redux/profilePageReducer\";\r\nimport React from \"react\";\r\nimport {Checkbox, Input, Textarea} from \"../../common/form-elements/FormElements\";\r\nimport {maxLength100, required} from \"../../../utils/validators/validators\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Button} from \"../../common/buttons/Button\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\nexport type InfoFormType = {\r\n    userProfile: UserProfileType | null\r\n}\r\ntype OwnPropsType = {\r\n    userProfile: UserProfileType | null\r\n}\r\n\r\nconst ProfileInfoForm: React.FC<InjectedFormProps<InfoFormType, OwnPropsType> & OwnPropsType> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.info_form}>\r\n            {props.error && <div className={s.error}>{props.error}</div>}\r\n            <div>\r\n                <u>\"Full name\" :</u><Field placeholder={'enter text...'}\r\n                                           name={'fullName'}\r\n                                           component={Input}\r\n            />\r\n            </div>\r\n            <div>\r\n                <u>\"About me\" :</u><Field placeholder={'enter text...'}\r\n                                         name={'aboutMe'}\r\n                                         component={Textarea}\r\n            />\r\n            </div>\r\n            <div>\r\n                <u>\"Looking for a job\" :</u><Field name={'lookingForAJob'}\r\n                                                component={Checkbox}\r\n                                                type={'checkbox'}\r\n            />\r\n            </div>\r\n            <div>\r\n                <u>\"My professional skills\" :</u><Field placeholder={'enter text...'}\r\n                                                           name={'lookingForAJobDescription'}\r\n                                                           component={Textarea}\r\n            />\r\n            </div>\r\n            <div>\r\n                <u>Contacts : </u>\r\n                {props.userProfile && Object.keys(props.userProfile.contacts).map((key) => {\r\n                    return <div key={key}>\r\n                        <u> {key} :</u><Field placeholder={'enter text...'}\r\n                                              name={'contacts.' + key}\r\n                                              component={Input}\r\n                    />\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div style={{'marginTop': '20px'}}>\r\n                <Button buttonName={'Save info'}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm<InfoFormType, OwnPropsType>({\r\n    form: 'edit-info'  // уникальное имя для формы\r\n})(ProfileInfoForm)","import {UserProfileType} from \"../../../redux/profilePageReducer\";\r\nimport React, {FC} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Button} from \"../../common/buttons/Button\";\r\n\r\ntype InfoType = {\r\n    userProfile: UserProfileType | null\r\n    isOwner: boolean\r\n    onEditMode: () => void\r\n}\r\n\r\nexport const Info: FC<InfoType> = (props) => {\r\n    const {userProfile, isOwner, onEditMode} = props\r\n\r\n    return (\r\n        <div className={s.info}>\r\n            <div>\r\n                <u>\"Full name\" : </u>\r\n                {userProfile?.fullName ? userProfile.fullName : 'not indicated'}</div>\r\n            <div>\r\n                <u>\"About me\" : </u>\r\n                {userProfile?.aboutMe ? userProfile.aboutMe : 'not indicated'}</div>\r\n            <div>\r\n                <u>\"Loking for a job\" : </u>\r\n                {userProfile?.lookingForAJob ? 'yes' : 'no'}</div>\r\n            <div>\r\n                <u>\"My professional skills\" : </u>\r\n                {userProfile?.lookingForAJobDescription ? userProfile.lookingForAJobDescription : 'not indicated'}\r\n            </div>\r\n            {isOwner && <div><Button onClickHandler={onEditMode} buttonName={'Edit information'}/></div>}\r\n            <div>\r\n                <u>Contacts : </u>\r\n                {userProfile && Object.keys(userProfile.contacts).map((key) => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={userProfile.contacts[key]}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsType> = React.memo((props) => {\r\n    const {\r\n        contactTitle,\r\n        contactValue,\r\n    } = props\r\n\r\n    return (\r\n        <div style={{'paddingLeft': '20px'}}>\r\n            <span>\"{contactTitle}\" :</span>\r\n            {contactValue ? contactValue : 'not indicated'}\r\n        </div>\r\n    )\r\n})\r\n","import s from './ProfileInfo.module.css';\r\nimport React, {ChangeEvent, FC} from \"react\";\r\nimport {UserProfileType} from \"../../../redux/profilePageReducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport ava from '../../../assets/images/notAva.png'\r\nimport ProfileInfoForm, {InfoFormType} from \"./ProfileInfoForm\";\r\nimport {Info} from \"./Info\";\r\n\r\ntype PropsType = {\r\n    userProfile: UserProfileType | null\r\n    loading: boolean\r\n    isOwner: boolean\r\n    status: string | ''\r\n    updateStatus: (status: string) => void\r\n    photoUpload: (PhotoFile: any) => void\r\n    saveProfileInfo: (formData: InfoFormType) => void\r\n    toggleEditForm: (edit: boolean) => void\r\n    editForm: boolean\r\n}\r\n\r\nexport const ProfileInfo: FC<PropsType> = (props) => {\r\n    const {\r\n        userProfile,\r\n        loading,\r\n        isOwner,\r\n        status,\r\n        updateStatus,\r\n        photoUpload,\r\n        saveProfileInfo,\r\n        editForm,\r\n        toggleEditForm\r\n    } = props\r\n\r\n    const photoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.target.files && photoUpload(e.target.files[0])\r\n    }\r\n    const onSubmit = (formData: InfoFormType) => {\r\n        saveProfileInfo(formData)\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfoBlock}>\r\n            <div>\r\n                <div  className={s.photo}>\r\n                    {!loading && userProfile ?\r\n                        <img alt={''} src={userProfile.photos.large ? userProfile.photos.large : ava}/>\r\n                        : <Preloader/>\r\n                    }\r\n                </div>\r\n                <div>\r\n                    {isOwner && <input type={'file'} onChange={photoSelected}/>}\r\n                </div>\r\n                <div className={s.status}>\r\n                    <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n            </div>\r\n            {editForm ?\r\n                <ProfileInfoForm userProfile={userProfile} onSubmit={onSubmit}/> :\r\n                <Info userProfile={userProfile} isOwner={isOwner} onEditMode={() => {\r\n                    toggleEditForm(true)\r\n                }}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport ava from '../../../../assets/images/notAva.png'\r\nimport s from \"./Post.module.css\"\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likes: number\r\n    profilePhoto?: string | null\r\n}\r\n\r\nexport const Post: React.FC<PropsType> = (props) => {\r\n    const {\r\n        message,\r\n        likes,\r\n        profilePhoto\r\n    } = props\r\n\r\n    return (\r\n        <div className={s.post_item}>\r\n            <img alt={''} src={profilePhoto ? profilePhoto : ava}/>\r\n            <div className={s.post}>\r\n                {message}\r\n            </div>\r\n            <div className={s.like}>\r\n                likes: {likes}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import s from \"./MyPosts.module.css\";\r\nimport React from \"react\";\r\nimport {Post} from \"./post/Post\";\r\nimport {PostType} from \"../../../redux/profilePageReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Button} from \"../../common/buttons/Button\";\r\nimport {Textarea} from \"../../common/form-elements/FormElements\";\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newMessagePost: string) => void\r\n    profilePhoto?: string | null\r\n}\r\n\r\nexport const MyPosts: React.FC<PropsType> = React.memo((props) => {\r\n    const {addPost, posts, profilePhoto,} = props\r\n\r\n    const postsElement = [...posts].reverse().map((p) =>\r\n        <Post\r\n        key={p.id}\r\n        message={p.message}\r\n        likes={p.likes}\r\n        profilePhoto={profilePhoto}\r\n        />)\r\n\r\n    const AddNewPost = (formData: FormPostDataType) => {\r\n        addPost(formData.newPost)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className={s.heading}>-- My posts --</h3>\r\n            <div className={s.add_post}>\r\n                <AddPostReduxForm onSubmit={AddNewPost}/>\r\n            </div>\r\n            <div className={s.post}>\r\n\r\n                {postsElement}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport type FormPostDataType = {\r\n    newPost: string\r\n}\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormPostDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <div>\r\n                <Field placeholder={'type new post...'}\r\n                       name={'myPostForm'}\r\n                       component={Textarea}\r\n                />\r\n                <Button buttonName={'add post'}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<FormPostDataType>({\r\n    form: 'myPostForm'  // уникальное имя для формы\r\n})(AddPostForm)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\nimport {\r\n    addPost,\r\n    getProfile,\r\n    getStatus, photoUpload,\r\n    PostType, saveProfileInfo,\r\n    updateStatus,\r\n    UserProfileType, toggleEditForm\r\n} from \"../../redux/profilePageReducer\";\r\nimport s from \"./Profile.module.css\";\r\nimport {ProfileInfo} from \"./profileInfo/ProfileInfo\";\r\nimport {MyPosts} from \"./my-posts/MyPosts\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {InfoFormType} from \"./profileInfo/ProfileInfoForm\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n    userProfile: UserProfileType | null\r\n    loading: boolean\r\n    isAuth: boolean\r\n    myId: number | null\r\n    status: string | ''\r\n    profilePhoto?: string | null\r\n    editForm: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newMessagePost: string) => void\r\n    getProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    photoUpload: (Photofile: any) => void\r\n    saveProfileInfo: (formData: InfoFormType) => void\r\n    toggleEditForm: (edit: boolean) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\n\r\ntype ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    changeProfile() {\r\n        let userId = Number(this.props.match.params.userId)     //<==== get the id from the browser line using (withRouter)\r\n        if (!userId) {\r\n           userId = this.props.myId as number\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.changeProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.changeProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.content}>\r\n                <ProfileInfo\r\n                    userProfile={this.props.userProfile}\r\n                    loading={this.props.loading}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    photoUpload={this.props.photoUpload}\r\n                    saveProfileInfo={this.props.saveProfileInfo}\r\n                    editForm={this.props.editForm}\r\n                    toggleEditForm={this.props.toggleEditForm}\r\n                />\r\n                <MyPosts\r\n                    posts={this.props.posts}\r\n                    addPost={this.props.addPost}\r\n                    profilePhoto={this.props.profilePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        userProfile: state.profilePage.userProfile,\r\n        loading: state.usersPage.loading,\r\n        isAuth: state.auth.isAuth,\r\n        myId: state.auth.id,\r\n        status: state.profilePage.status,\r\n        profilePhoto: state.profilePage.userProfile?.photos?.large,\r\n        editForm: state.profilePage.editForm\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addPost, getProfile, getStatus, updateStatus, photoUpload, saveProfileInfo, toggleEditForm}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n","import React from \"react\"\r\nimport s from \"./Header.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button} from \"../common/buttons/Button\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nexport const Header = (props: PropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.headerContainer}>\r\n                {props.isAuth ?\r\n                    <div className={s.login}> {props.login} <Button onClickHandler={props.logout} buttonName={'LogOut'}/> </div>\r\n                    : <NavLink className={s.navlink} to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\nimport {Header} from \"./Header\";\r\nimport {logout} from \"../../redux/authReducer\";\r\n\r\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nexport class HeaderApiContainer extends React.Component<HeaderPropsType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header\r\n                isAuth={this.props.isAuth}\r\n                login={this.props.login}\r\n                logout={this.props.logout}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport const HeaderContainer = connect(mapStateToProps, {logout}) (HeaderApiContainer)\r\n\r\n","export const required = (value: number | string) => {\r\n    if (value) return undefined\r\n    return 'Field is required to enter!'\r\n}\r\n\r\nconst maxLengthValid = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols!`\r\n    }else{\r\n        return undefined\r\n    }\r\n}\r\nexport const maxLength10 = maxLengthValid(10)\r\nexport const maxLength100 = maxLengthValid(100)\r\n\r\n\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Checkbox, Input} from \"../common/form-elements/FormElements\";\r\nimport {maxLength100, required} from \"../../utils/validators/validators\";\r\nimport s from \"./Login.module.css\";\r\nimport {Button} from \"../common/buttons/Button\";\r\nimport {FormType} from \"./Login\";\r\nimport style from './Login.module.css'\r\n\r\ntype OwnPropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormType, OwnPropsType> & OwnPropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={style.input}>\r\n                <Field placeholder={'email'}\r\n                       name={'email'}\r\n                       component={Input}\r\n                       validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div className={style.input}>\r\n                <Field placeholder={'password'}\r\n                       name={'password'}\r\n                       component={Input}\r\n                       validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div className={style.checkbox}>\r\n                <Field component={Checkbox}\r\n                       name={'rememberMe'}\r\n                       type={'checkbox'}\r\n                />\r\n                <p>remember me</p>\r\n            </div>\r\n            {props.captchaUrl && <img src={props.captchaUrl}/>}\r\n            {props.captchaUrl &&\r\n            <div>\r\n                <Field placeholder={'enter symbols from image'}\r\n                       component={Input}\r\n                       name={'captcha'}\r\n                />\r\n            </div>}\r\n            {props.error && <div className={s.error}>{props.error}</div>}\r\n            <div className={style.btn}>\r\n                <Button buttonName={'Login'}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<FormType, OwnPropsType>({\r\n    form: 'login'  // уникальное имя для формы\r\n})(LoginForm)","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport style from \"./Login.module.css\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\nexport type FormType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType>= (props) => {\r\n\r\n    const {login, isAuth, captchaUrl} = props\r\n\r\n    const onSubmit = (formData: FormType) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if(isAuth) {\r\n       return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div  className={style.logForm}>\r\n            <div className={style.info}>\r\n                To login in the application, please enter the email and password of the test account (has restrictions on requests)<br/>\r\n                Email: <span>free@samuraijs.com</span><br/>\r\n                Password: <span>free</span>\r\n            </div>\r\n            <h2>Login</h2>\r\n            <LoginForm captchaUrl={captchaUrl} onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\nexport default connect(mapStateToProps, {login})(Login)\r\n","import React, {Suspense} from 'react';\nimport './App.css';\nimport {Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {Settings} from \"./components/settings/Settings\";\nimport {News} from \"./components/news/News\";\nimport {Music} from \"./components/music/Music\";\nimport {NavbarContainer} from \"./components/navbar/NavbarContainer\";\nimport ProfileContainer from \"./components/profile/ProfileContainer\";\nimport {HeaderContainer} from \"./components/header/HeaderContainer\";\nimport Login from \"./components/login/Login\";\nimport {connect} from \"react-redux\";\nimport {compose} from 'redux';\nimport {initializeApp} from \"./redux/AppReducer\";\nimport {AppRootStateType} from \"./redux/Redux-store\";\nimport {Preloader} from \"./components/common/preloader/Preloader\";\n\nconst Dialogs = React.lazy(() => import('./components/dialogs/DialogsContainer'))\nconst UsersContainer = React.lazy(() => import('./components/users/UsersContainer'))\n\ntype PropsType = {\n    initializeApp: () => void\n    initialized: boolean\n}\ntype MapStateToPropsType = {\n    initialized: boolean\n}\n\nclass App extends React.Component<PropsType> {\n\n    componentDidMount(): void {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <NavbarContainer/>\n                <div className={'app-wrapper-content'}>\n                    <Switch>\n                        <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                        <Route path='/dialogs' render={() => {\n                            return <Suspense fallback={<Preloader/>}>\n                                 <Dialogs/>\n                            </Suspense>\n                        }}/>\n                        <Route path='/users' render={() => {\n                            return <Suspense fallback={<Preloader/>}>\n                                <UsersContainer/>\n                            </Suspense>\n                        }}/>\n                        <Route path='/settings' render={() => <Settings/>}/>\n                        <Route path='/login' render={() => <Login/>}/>\n                        <Route path='/social-network' render={() => <Redirect to={'/profile'}/>}/>\n                        <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\n                        <Route path='*' render={() => <div>404 NOT FOUND</div>}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {initializeApp}),\n    withRouter)(App)\n\n","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/Redux-store'\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n)\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__3suiF\",\"status\":\"ProfileInfo_status__1Nxje\",\"photo\":\"ProfileInfo_photo__3shCV\",\"info\":\"ProfileInfo_info__2iS-I\",\"info_form\":\"ProfileInfo_info_form__OI2OF\",\"error\":\"ProfileInfo_error__1E0S-\"};","import {usersApi} from \"../api/api\";\r\nimport {AppThunkType} from \"./Redux-store\";\r\n\r\nconst UNFOLLOW = 'SOCIAL-NETWORK/USERS/UNFOLLOW'\r\nconst FOLLOW = 'SOCIAL-NETWORK/USERS/FOLLOW'\r\nconst SET_USERS = 'SOCIAL-NETWORK/USERS/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SOCIAL-NETWORK/USERS/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_COUNT = 'SOCIAL-NETWORK/USERS/SET_TOTAL_COUNT'\r\nconst TOGGLE_LOADING = 'SOCIAL-NETWORK/USERS/TOGGLE_LOADING'\r\nconst TOGGLE_FOLLOWING_PROGRESS = 'SOCIAL-NETWORK/USERS/TOGGLE_FOLLOWING_PROGRESS'\r\n\r\nexport type UsersActionsType =\r\n    | UnfollowActionType\r\n    | FollowActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalCountActionType\r\n    | ToggleLoadingActionType\r\n    | ToggleFollowingProgressActionType\r\n\r\ntype UnfollowActionType = ReturnType<typeof successedUnfollow>\r\ntype FollowActionType = ReturnType<typeof successedFollow>\r\ntype SetUsersActionType = ReturnType<typeof setUsers>\r\ntype SetCurrentPageActionType = ReturnType<typeof setCurrentPage>\r\ntype SetTotalCountActionType = ReturnType<typeof setTotalCount>\r\ntype ToggleLoadingActionType = ReturnType<typeof toggleLoading>\r\ntype ToggleFollowingProgressActionType = ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UserType>\r\n    count: number\r\n    totalCount: number\r\n    currentPage: number\r\n    loading: boolean\r\n    followingProgress: Array<number>\r\n}\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n    status: string\r\n}\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nconst initialState: UsersPageType = {\r\n    users: [],\r\n    count: 20,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    loading: false,\r\n    followingProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: UsersActionsType): UsersPageType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        case TOGGLE_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingProgress: action.isLoading\r\n                    ? [...state.followingProgress, action.userId]\r\n                    : state.followingProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n////////////////////////////////////////////// action creators ///////////////////////////////\r\n\r\nexport const successedFollow = (userId: number) => {\r\n    return {type: FOLLOW, userId: userId} as const\r\n}\r\nexport const successedUnfollow = (userId: number) => {\r\n    return {type: UNFOLLOW, userId: userId} as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {type: SET_USERS, users: users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: SET_CURRENT_PAGE, currentPage: currentPage} as const\r\n}\r\nexport const setTotalCount = (totalCount: number) => {\r\n    return {type: SET_TOTAL_COUNT, totalCount: totalCount} as const\r\n}\r\nexport const toggleLoading = (loading: boolean) => {\r\n    return {type: TOGGLE_LOADING, loading: loading} as const\r\n}\r\nexport const toggleFollowingProgress = (isLoading: boolean, userId: number) => {\r\n    return {type: TOGGLE_FOLLOWING_PROGRESS, isLoading: isLoading, userId: userId} as const\r\n}\r\n\r\n//////////////////////////////////////////// THUNK ////////////////////////////////////////////////////////////////\r\n\r\nexport const requestUsers = (currentPage: number, count: number): AppThunkType => async dispatch => {\r\n    dispatch(setCurrentPage(currentPage))\r\n    dispatch(toggleLoading(true))\r\n    const res = await usersApi.getUsers(currentPage, count)\r\n    dispatch(toggleLoading(false))\r\n    dispatch(setUsers(res.data.items))\r\n    dispatch(setTotalCount(res.data.totalCount))\r\n}\r\n\r\nexport const follow = (userId: number): AppThunkType => async dispatch => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    const res = await usersApi.follow(userId)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(successedFollow(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n\r\n    /*followUnfollowFlow(dispatch, userId, usersApi.follow(userId), successedFollow)*/\r\n}\r\n\r\nexport const unfollow = (userId: number): AppThunkType => async dispatch => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    const res = await usersApi.unfollow(userId)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(successedUnfollow(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n\r\n  /*  followUnfollowFlow(dispatch, userId, usersApi.unfollow(userId), successedUnfollow)*/\r\n}\r\n\r\n/*\r\nconst followUnfollowFlow = async (dispatch: Dispatch<UsersActionsType>,                 //// Helper function\r\n                                  userId: number | null, apiMethod: any,\r\n                                  actionCreator: (userId: number | null) => FollowActionType | UnfollowActionType) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    const res = await apiMethod(userId)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n*/\r\n","export default __webpack_public_path__ + \"static/media/preloader.d3fbaf2b.gif\";","import preloader from \"../../../assets/images/preloader.gif\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img alt={'there should be '} src={preloader}/>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formElement\":\"FormElements_formElement__2tkD1\",\"error\":\"FormElements_error__gdMqo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header___SfV1\",\"headerContainer\":\"Header_headerContainer__OyN1A\",\"login\":\"Header_login__3bWw6\",\"navlink\":\"Header_navlink__2785N\"};","export default __webpack_public_path__ + \"static/media/notAva.b83ea6bc.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"MyPosts_heading__3mMuh\",\"add_post\":\"MyPosts_add_post__2UtlE\",\"post\":\"MyPosts_post__ROcyD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_item\":\"Post_post_item__21zv8\",\"like\":\"Post_like__1Fhs5\",\"post\":\"Post_post__1Uo7o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__2ant2\",\"active\":\"Buttons_active__1jy1t\"};"],"sourceRoot":""}