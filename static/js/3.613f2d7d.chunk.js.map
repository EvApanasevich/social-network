{"version":3,"sources":["components/dialogs/Dialogs.module.css","components/dialogs/dialogItem/DialogItem.module.css","components/dialogs/message/Message.module.css","components/dialogs/dialogItem/DialogItem.tsx","components/dialogs/message/Message.tsx","components/dialogs/Dialogs.tsx","components/dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","name","path","id","className","s","dialog","alt","src","ava","to","activeClassName","active","Message","message","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","maxLength10","Button","buttonName","compose","connect","state","dialogPage","sendMessage","withAuthRedirect","dialogsItem","dialogs","map","d","messageElement","messages","m","dialogsItems","message_block","input_message","formData","newMessage"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,cAAgB,+BAA+B,cAAgB,iC,oBCAxQD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,OAAS,6B,oBCA/DD,EAAOC,QAAU,CAAC,QAAU,2B,gHCQfC,EAAkC,SAACC,GAAW,IAEnDC,EAEAD,EAFAC,KAIEC,EAAO,YAFTF,EADAG,GAKJ,OACI,sBAAKC,UAAWC,IAAEC,OAAlB,UACI,qBAAKC,IAAK,iBAAkBC,IAAKC,MACjC,cAAC,IAAD,CAASC,GAAIR,EAAMS,gBAAiBN,IAAEO,OAAtC,SACKX,Q,yBCdJY,EAA+B,SAACb,GAAW,IAC7Cc,EAAWd,EAAXc,QAEP,OACI,qBAAKV,UAAWC,IAAES,QAAlB,SACKA,K,0CC+CAC,EAAsBC,YAA+B,CAC9DC,KAAM,qBADyBD,EAhBsC,SAAChB,GAEtE,OACI,sBAAMkB,SAAUlB,EAAMmB,aAAtB,SACI,gCACI,cAACC,EAAA,EAAD,CAAOC,YAAa,qBACbpB,KAAM,aACNqB,UAAWC,IACXC,SAAU,CAACC,IAAUC,OAE5B,cAACC,EAAA,EAAD,CAAQC,WAAY,wB,wBC9BrBC,sBACXC,aAPoB,SAACC,GACrB,MAAO,CACHC,WAAYD,EAAMC,cAKG,CAACC,kBAC1BC,IAFWL,EDboC,SAAC7B,GAAW,IACpDiC,EAA4BjC,EAA5BiC,YAAaD,EAAehC,EAAfgC,WAEdG,EAAcH,EAAWI,QAAQC,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAuBrC,KAAMqC,EAAErC,KAAME,GAAImC,EAAEnC,IAA1BmC,EAAEnC,OAC/DoC,EAAiBP,EAAWQ,SAASH,KAAI,SAACI,GAAD,OAAO,cAAC,EAAD,CAAoB3B,QAAS2B,EAAE3B,SAAjB2B,EAAEtC,OAMtE,OACI,sBAAKC,UAAWC,IAAE+B,QAAlB,UACI,8BACI,qBAAKhC,UAAWC,IAAEqC,aAAlB,SACKP,MAGT,sBAAK/B,UAAWC,IAAEsC,cAAlB,UACI,qBAAKvC,UAAWC,IAAEmC,SAAlB,SACKD,IAEL,qBAAKnC,UAAWC,IAAEuC,cAAlB,SACI,cAAC7B,EAAD,CAAqBG,SAhBd,SAAC2B,GACpBZ,EAAYY,EAASC","file":"static/js/3.613f2d7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3vHfO\",\"dialog\":\"Dialogs_dialog__31BRo\",\"dialogsItems\":\"Dialogs_dialogsItems__2AlGx\",\"active\":\"Dialogs_active__oHyJK\",\"messages\":\"Dialogs_messages__10h-7\",\"message_block\":\"Dialogs_message_block__1EwOi\",\"input_message\":\"Dialogs_input_message__1wRGs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3uGrh\",\"active\":\"DialogItem_active__q0K0a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__10h-L\"};","import s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport ava from '../../../assets/images/Avaimg.png'\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem: React.FC<PropsType> = (props) => {\r\n    const {\r\n        name,\r\n        id\r\n    } = props\r\n\r\n    const path = '/dialogs/' + id\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img alt={'should be here'} src={ava}/>\r\n            <NavLink to={path} activeClassName={s.active}>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport s from './Message.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message: React.FC<PropsType> = (props) => {\r\n    const {message} = props\r\n\r\n    return (\r\n        <div className={s.message}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./dialogItem/DialogItem\";\r\nimport {Message} from \"./message/Message\";\r\nimport React from \"react\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Button} from \"../common/buttons/Button\";\r\nimport {maxLength10, required} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/form-elements/FormElements\";\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    const {sendMessage, dialogPage,} = props\r\n\r\n    const dialogsItem = dialogPage.dialogs.map((d) => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    const messageElement = dialogPage.messages.map((m) => <Message key={m.id} message={m.message}/>)\r\n\r\n    const sendNewMessage = (formData: FormMessageDataType) => {\r\n        sendMessage(formData.newMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsItem}\r\n                </div>\r\n            </div>\r\n            <div className={s.message_block}>\r\n                <div className={s.messages}>\r\n                    {messageElement}\r\n                </div>\r\n                <div className={s.input_message}>\r\n                    <AddMessageReduxForm onSubmit={sendNewMessage} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormMessageDataType = {\r\n    newMessage: string\r\n}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormMessageDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'enter your message'}\r\n                       name={'newMessage'}\r\n                       component={Textarea}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n                <Button buttonName={'add message'}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<FormMessageDataType>({\r\n    form: 'dialogMessageForm'  // уникальное имя для формы\r\n})(AddMessageForm)","import {sendMessage, DialogPageType} from \"../../redux/dialogPageReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport React from \"react\";\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    dialogPage: DialogPageType\r\n}\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {sendMessage}),\r\n    withAuthRedirect,\r\n) (Dialogs)"],"sourceRoot":""}