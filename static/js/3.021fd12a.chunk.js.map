{"version":3,"sources":["components/dialogs/dialogItem/DialogItem.module.css","components/dialogs/Dialogs.module.css","components/dialogs/message/Message.module.css","components/dialogs/dialogItem/DialogItem.tsx","components/dialogs/message/Message.tsx","components/dialogs/Dialogs.tsx","components/dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","dialog","active","setDialogIsOpen","dispatch","useDispatch","onClick","setActiveDialog","id","getMessages","className","s","img","alt","src","photos","small","ava","userName","Message","message","photo","myPhoto","myId","removeMessage","myMessage","senderId","message_item","corner","is_my","sender_name","senderName","message_body","text","body","time","x","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","Button","buttonName","compose","connect","state","dialogPage","withAuthRedirect","useEffect","getAllDialogs","getProfile","useState","dialogIsOpen","activeDialogId","useSelector","auth","profilePage","userProfile","messageId","deleteMessage","activeDialog","dialogs","find","dialogsItem","map","messageElement","messages","dialogsItems","message_block","input_message","formData","sendMessage","newMessage"],"mappings":"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","file":"static/js/3.021fd12a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3uGrh\",\"img\":\"DialogItem_img__3JM09\",\"active\":\"DialogItem_active__q0K0a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3vHfO\",\"dialog\":\"Dialogs_dialog__31BRo\",\"dialogsItems\":\"Dialogs_dialogsItems__2AlGx\",\"active\":\"Dialogs_active__oHyJK\",\"messages\":\"Dialogs_messages__10h-7\",\"message_block\":\"Dialogs_message_block__1EwOi\",\"input_message\":\"Dialogs_input_message__1wRGs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message_item\":\"Message_message_item__3pWCa\",\"corner\":\"Message_corner__QmvZt\",\"is_my\":\"Message_is_my__YRkoc\",\"message\":\"Message_message__10h-L\",\"sender_name\":\"Message_sender_name__1jzvC\",\"message_body\":\"Message_message_body__NrzQN\",\"text\":\"Message_text__3jwOA\",\"time\":\"Message_time__3FsmP\",\"x\":\"Message_x__sAFYp\"};","import s from './DialogItem.module.css'\r\nimport ava from '../../../assets/images/Avaimg.png'\r\nimport { DialogType, setActiveDialog, getMessages } from '../../../redux/dialogPageReducer';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ntype PropsType = {\r\n   dialog: DialogType\r\n   active: boolean\r\n   setDialogIsOpen: (flag: boolean) => void\r\n}\r\n\r\nexport const DialogItem: React.FC<PropsType> = (props) => {\r\n   const { dialog, active, setDialogIsOpen } = props\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const startChatting = () => {\r\n      setDialogIsOpen(true)\r\n      dispatch(setActiveDialog(dialog.id))\r\n      dispatch(getMessages(dialog.id))\r\n   }\r\n\r\n   return (\r\n      <div onClick={startChatting} className={active ? s.active : s.dialog}>\r\n         <div>\r\n            <img className={s.img} alt={'should be here'} src={dialog.photos.small ? dialog.photos.small : ava} />\r\n         </div>\r\n         <div>\r\n            {dialog.userName}\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport s from './Message.module.css'\r\nimport { MessageType } from \"../../../redux/dialogPageReducer\"\r\n\r\ntype PropsType = {\r\n   message: MessageType\r\n   photo?: string | undefined\r\n   myId: number | null\r\n   myPhoto: string | undefined\r\n   removeMessage: (messageId: string) => void\r\n}\r\n\r\nexport const Message: React.FC<PropsType> = (props) => {\r\n   const { message, photo, myPhoto, myId, removeMessage } = props\r\n\r\n   const myMessage = myId === message.senderId\r\n\r\n   return (\r\n      <div className={s.message_item}>\r\n         <img src={myMessage ? myPhoto : photo} />\r\n         <div className={myMessage ? `${s.corner} ${s.is_my}` : s.corner} />\r\n         <div className={myMessage ? `${s.message} ${s.is_my}` : s.message}>\r\n            <div className={s.sender_name}>\r\n               {message.senderName}\r\n            </div>\r\n            <div className={s.message_body}>\r\n               <div className={s.text}>\r\n                  {message.body}\r\n               </div>\r\n               <div className={s.time}>\r\n                  12:00\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div onClick={() => removeMessage(message.id)} className={s.x}>\r\n            X\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { getAllDialogs, sendMessage, deleteMessage } from \"../../redux/dialogPageReducer\";\r\nimport { Button } from \"../common/buttons/Button\";\r\nimport { Textarea } from \"../common/form-elements/FormElements\";\r\nimport { DialogItem } from \"./dialogItem/DialogItem\";\r\nimport s from './Dialogs.module.css';\r\nimport { DialogsPropsType } from \"./DialogsContainer\";\r\nimport { Message } from \"./message/Message\";\r\nimport { AppRootStateType } from \"../../redux/Redux-store\"\r\nimport { getProfile } from \"../../redux/profilePageReducer\";\r\nimport ava from \"../../assets/images/Avaimg.png\"\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n   const { dialogPage } = props\r\n\r\n   useEffect(() => {\r\n      dispatch(getAllDialogs())\r\n      dispatch(getProfile(myId))\r\n   }, [])\r\n\r\n   const [dialogIsOpen, setDialogIsOpen] = useState<boolean>(false)\r\n   const dispatch = useDispatch()\r\n   const activeDialogId = useSelector<AppRootStateType, number | null>(state => state.dialogPage.activeDialogId)\r\n   const myId = useSelector<AppRootStateType, number | null>(state => state.auth.id)\r\n   const myPhoto = useSelector<AppRootStateType, string | undefined>(state => state.profilePage.userProfile?.photos?.small)\r\n\r\n   const send = (formData: FormMessageDataType) => {\r\n      dispatch(sendMessage(formData.newMessage))\r\n   }\r\n   const removeMessage = (messageId: string) => {\r\n      dispatch(deleteMessage(messageId))\r\n   }\r\n\r\n   const activeDialog = dialogPage.dialogs.find((dialog) => dialog.id === activeDialogId)\r\n   \r\n   const dialogsItem = dialogPage.dialogs.map((dialog) =>\r\n      <DialogItem key={dialog.id} active={activeDialogId === dialog.id} dialog={dialog} setDialogIsOpen={setDialogIsOpen} />)\r\n   const messageElement = dialogPage.messages.map((message) =>\r\n      <Message key={message.id} message={message} removeMessage={removeMessage} photo={activeDialog?.photos.small} \r\n      myPhoto={myPhoto ? myPhoto : ava} myId={myId} />)\r\n\r\n   return (\r\n      <div className={s.dialogs}>\r\n         <div>\r\n            <div className={s.dialogsItems}>\r\n               {dialogsItem}\r\n            </div>\r\n         </div>\r\n         {dialogIsOpen ? <div className={s.message_block}>\r\n            <div className={s.messages}>\r\n               {messageElement}\r\n            </div>\r\n            <div className={s.input_message}>\r\n               <AddMessageReduxForm onSubmit={send} />\r\n            </div>\r\n         </div>\r\n            : <div>Ð¡hoose an interlocutor and start chatting right now </div>}\r\n      </div>\r\n   )\r\n}\r\n\r\ntype FormMessageDataType = {\r\n   newMessage: string\r\n}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormMessageDataType>> = (props) => {\r\n   return (\r\n      <form onSubmit={props.handleSubmit}>\r\n         <div>\r\n            <Field placeholder={'enter your message'}\r\n               name={'newMessage'}\r\n               component={Textarea}\r\n               // validate={[maxLength100]}\r\n            />\r\n            <Button buttonName={'add message'} />\r\n         </div>\r\n      </form>\r\n   )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<FormMessageDataType>({\r\n   form: 'dialogMessageForm'  // ÑÐ½Ð¸ÐºÐ°Ð»ÑÐ½Ð¾Ðµ Ð¸Ð¼Ñ Ð´Ð»Ñ ÑÐ¾ÑÐ¼Ñ\r\n})(AddMessageForm)","import {DialogPageType} from \"../../redux/dialogPageReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/Redux-store\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport React from \"react\";\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    dialogPage: DialogPageType\r\n}\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps),\r\n    withAuthRedirect,\r\n) (Dialogs)"],"sourceRoot":""}